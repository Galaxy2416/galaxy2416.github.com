<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Galaxy2416's blog]]></title>
  <subtitle><![CDATA[o(∩∩)o活在一次元～语不惊人死不休]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="galaxy2416.github.io/"/>
  <updated>2015-07-14T17:09:17.583Z</updated>
  <id>galaxy2416.github.io/</id>
  
  <author>
    <name><![CDATA[galaxy2416]]></name>
    <email><![CDATA[gin@mail.dlut.edu.cn]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[vim系列之配置文件]]></title>
    <link href="galaxy2416.github.io/2015/07/15/vimrc/"/>
    <id>galaxy2416.github.io/2015/07/15/vimrc/</id>
    <published>2015-07-14T16:47:03.000Z</published>
    <updated>2015-07-14T17:04:23.000Z</updated>
    <content type="html"><![CDATA[<h2 id="vim-">vim配置文件</h2>
<h4 id="-">搜索路径</h4>
<p>vim的配置文件搜索路径从Local到Global的搜索顺序为：</p>
<ul>
<li><code>~/.vim/vimrc</code> -&gt; Local     </li>
<li><code>~/.vimrc</code> -&gt; Local</li>
<li><code>/etc/vim/vimrc</code> -&gt; Global</li>
</ul>
<h4 id="gvim-vim">GVIM于VIM</h4>
<p>Gvim会继承vim的配置文件，同时有.gvimrc的单独配置文件</p>
<ul>
<li><code>~/.vim/gvimrc</code> -&gt; Local     </li>
<li><code>~/.gvimrc</code> -&gt; Local</li>
<li><code>/etc/vim/gvimrc</code> -&gt; Global
<a id="more"></a><h4 id="-">配置内容</h4>
以下为个人文件的内容， 作为记录
<center><strong>vimrc</strong></center><figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
278
279
280
281
282
283
284
285
286
287
288
289
290
291
292
293
294
295
296
297
298
299
300
301
302
303
304
305
306
307
308
309
310
311
312
313
314
315
316
317
318
319
320
321
322
323
324
325
326
327
328
329
330
331
332
333
334
335
336
337
338
339
340
341
342
343
344
345
346
347
348
349
350
351
352
353
354
355
356
357
358
359
360
361
362
363
364
365
366
367
368
369
370
371
372
373
374
375
376
377
378
379
380
381
382
383
384
385
386
387
388
389
390
391
392
393
394
395
396
397
398
399
400
401
402
403
404
405
406
407
408
409
410
411
412
413
414
415
416
417
418
419
420
421
422
423
424
425
426
427
428
429
430
431
432
433
434
435
436
437
438
439
440
441
442
443
444
445
446
447
448
449
450
451
452
453
454
455
456
457
458
459
460
461
462
463
464
465
466
467
468
469
470
471
472
473
474
475
476
477
478
479
480
481
482
483
484
485
486
487
488
489
490
491
492
493
494
495
496
497
498
499
500
501
502
503
504
505
506
507
508
509
510
511
512
513
514
515
516
517
518
519
520
521
522
523
524
525
526
527
528
529
530
531
532
533
534
535
536
537
538
539
540
541
542
543
544
545
546
547
548
549
550
551
552
553
554
555
556
557
558
559
560
561
562
563
564
565
566
567
568
569
570
571
572
573
574
575
576
577
578
579
580
581
582
583
584
585
586
587
588
589
590
591
592
593
594
595
596
597
598
599
600
601
602
603
604
605
606
607
608
609
610
611
612
613
614
615
616
617
618
619
620
621
622
623
624
625
626
627
628
629
630
631
632
633
634
635
636
637
638
639
640
641
642
643
644
645
646
647
648
649
650
651
652
653
654
655
656
657
658
659
660
661
662
663
664
665
666
667
668
669
670
671
672
673
674
675
676
677
678
679
680
681
682
683
684
685
686
687
688
689
690
691
692
693
694
695
696
697
698
699
700
701
702
703
704
705
706
707
708
709
710
711
712
713
714
715
716
717
718
719
720
721
722
723
724
725
726
727
728
729
730
731
732
733
734
735
736
737
738
739
740
741
742
743
744
745
746
747
748
749
750
751
752
753
754
755
756
757
758
759
760
761
762
763
764
765
766
767
768
769
770
771
772
773
774
775
776
777
778
779
780
781
782
783
784
785
786
787
788
789
790
791
792
793
794
795
796
797
798
799
800
801
802
803
804
805
806
807
808
809
810
811
812
813
</pre></td><td class="code"><pre><span class="xml">" -----------------   Author: Sx (fix Ruchee's)
" -----------------    Email: 346940792@qq.com
" -----------------     Date: 2015-07-09
" Determine the operating system
if (has("win32") || has("win64") || has("win32unix"))
    let g:isWin = 1
else
    let g:isWin = 0
endif


" 256 color xterm-256color or 8 color 
" if &term=="xterm"
"    set t_Co=8
" endif

"  fonts

"set guifont=Courier\ New:h10
"set guifont=Eunjin\ 11
set guifont=Droid\ Sans\ Mono\ for\ Powerline\ 11

" Ctrl + K     --光标移上一行末尾
" Ctrl + H     --光标移行首
" Ctrl + L     --光标移行尾
" Ctrl + Z     --取代ESC模式键 [和Lingos快捷键有冲突]
" Ctrl + S     --保存文件
" Ctrl + C     --编译 [支持Gas、C/C++、Java、C#、Haskell]
" \\run	  	   --运行 [支持Gas、C/C++、Java、C#、Haskell、Bash、Lua、Perl、Python、Ruby]
" Ctrl + E     --添加注释 [插入模式下] [添加的是C/C++的行注释，所以只适用于C/C++]
" Ctrl + E     --一步加载语法模板和作者、时间信息 [非插入模式下] [本质是:LoadTemplate和:AuthorInfoDetect的结合]
" Ctrl + B     --调出Taglist插件
" Shift + C    --选中状态下复制 [只在vmap模式下生效]
" Shift + V    --粘贴剪切板中的内容 [全模式有效]

" <span class="tag">&lt;<span class="title">C-P</span>&gt;</span>                  --单词补全
" <span class="tag">&lt;<span class="title">C-X</span>&gt;</span><span class="tag">&lt;<span class="title">C-L</span>&gt;</span>             --整行补全
" Tab键                  --插入模式下的全功能语法补全，相当强大 [snipMate插件]
" Tab键                  --Python Insert模式下代码智能补全 [Pydiction插件]

" wm                     --开启文档浏览窗口
" \ww                    --进入vimWiki模式

" za                     --打开或关闭当前折叠
" zM                     --关闭所有折叠
" zR                     --打开所有折叠

" :set syntax=cpp        --手动选择语法高亮 [或 :set filetype=cpp]

" :%!xxd                 --转储二进制文件，以十六进制形式显示
" :%!xxd -r              --还原二进制文件


set tabstop=4                " Set the width of the TAB key		" 设置tab键的宽度 
set shiftwidth=4             " Set the width of shifting a newline	" 换行时行间交错使用4个空格
set autoindent               " Autoindent				" 自动对齐
"set ai!                     " Disable the autoindent			" 设置自动缩进
set backspace=2              " Enable the backspace			" 设置退格键可用
set backspace=indent,eol,start
set cindent shiftwidth=4     " Set autoindent 4 spacing			" 自动缩进4空格
set smartindent              " Smartindent				" 智能自动缩进
set number                      " Display line number			" 显示行号
set showmatch                " Brackets match				" 显示括号配对情况
set mouse=a                  " Enable the mouse				" 启用鼠标
set ruler                    " Shows the state of the cursor position	" 右下角显示光标位置的状态行
set incsearch                " /b could search book			" 查找book时，当输入/b时会自动找到
set hlsearch                 " high light search			" 开启高亮显示结果
"set nowrapscan              " search stop on the ends of the file	" 搜索到文件两端时不重新搜索
set nocompatible             " No compatible				" 关闭兼容模式
set cursorline               " High light the current line		" 突出显示当前行
set hidden                   " Allow shitf the buffer without saving the Buffer	"允许在有未保存的修改时切换缓冲区
"set list                    " Show tab					" 显示Tab符，使用一高亮竖线代替
"set listchars=tab:\|\ ,

" The width of the Plug
" 插件窗口的宽度，如TagList,NERD_tree等，自己设置
let s:PlugWinSize = 30

syntax enable                " 打开语法高亮
syntax on                    " 开启文件类型侦测
filetype indent on           " 针对不同的文件类型采用不同的缩进格式
filetype plugin on           " 针对不同的文件类型加载对应的插件
filetype plugin indent on

function! MaximizeWindow()
	silent !wmctrl -r :ACTIVE: -b add,maximized_vert,maximized_horz
endfunction 
if has("gui_running")
    au GUIEnter call MaximizeWindow		"窗口启动时自动最大化  
    "set guioptions-=m        " menu		" 隐藏菜单栏
    "set guioptions-=T        " toolbar		" 隐藏工具栏
    "set guioptions-=L       " leftRoll		" 隐藏左侧滚动条
    "set guioptions-=r       " rightRoll	" 隐藏右侧滚动条
    "set guioptions-=b       " bottomRoll	" 隐藏底部滚动条
    "set showtabline=0       " Tab		" 隐藏Tab栏
endif

set writebackup              " No backup	" 设置无备份文件
set nobackup
set autochdir                " set the current dir	" 设定文件浏览器目录为当前目录
set nowrap		     " no atuo newline		" 设置不自动换行

" manual 手工定义折叠 
" indent 更多的缩进表示更高级别的折叠 
" expr 用表达式来定义折叠 
" syntax 用语法高亮来定义折叠 
" diff 对没有更改的文本进行折叠 
" marker 对文中的标志折叠 

set foldmethod=syntax        " 选择代码折叠类型
set foldlevel=100             " close all the fold first		" 禁止自动折叠

" Status bar
set laststatus=2	" Display the status		" 总是显示状态栏
" highlight StatusLine cterm=bold ctermfg=yellow ctermbg=blue
" 获取当前路径，将$HOME转化为~
function! CurDir()
    let curdir = substitute(getcwd(), $HOME, "~", "g")
    return curdir
endfunction
set statusline=[%n]\ %f%m%r%h\ \|\ \ pwd:\ %{CurDir()}\ \ \|%=\|\ %l,%c\ %p%%\ \|\ ascii=%b,hex=%b%{((&fenc==\"\")?\"\":\"\ \|\ \".&fenc)}\ \|\ %{$USER}\ @\ %{hostname()}\ 

" 编码设置
"set fileencoding=utf-8
set fileencodings=utf-8,cp936,gbk,gb18030,big5,latin1

" For Haskell
:let hs_highlight_delimiters=1            " 高亮定界符
:let hs_highlight_boolean=1               " 把True和False识别为关键字
:let hs_highlight_types=1                 " 把基本类型的名字识别为关键字
:let hs_highlight_more_types=1            " 把更多常用类型识别为关键字
:let hs_highlight_debug=1                 " 高亮调试函数的名字
:let hs_allow_hash_operator=1             " 阻止把#高亮为错误


set laststatus=2                          " 开启状态栏信息
set cmdheight=2                           " 命令行的高度，默认为1，这里设为2

" 状态行显示的内容 [包括系统平台、文件类型、坐标、所占比例、时间等]
" set statusline=%F%m%r%h%w\ [FORMAT=%{&ff}]\ [TYPE=%Y]\ [POS=%l,%v][%p%%]\ %y%r%m%*%=\ %{strftime(\"%d/%m/%y\ -\ %H:%M\")}


" ######### 自定义快捷键 ######### "

" Ctrl + K 将光标移到上一行的末尾
" imap <span class="tag">&lt;<span class="title">C-K</span>&gt;</span> <span class="tag">&lt;<span class="title">ESC</span>&gt;</span>kA

" Ctrl + L 将光标移到行尾
" :imap <span class="tag">&lt;<span class="title">C-L</span>&gt;</span> <span class="tag">&lt;<span class="title">ESC</span>&gt;</span>A

" Ctrl + H 将光标移到行首
" :imap <span class="tag">&lt;<span class="title">C-H</span>&gt;</span> <span class="tag">&lt;<span class="title">ESC</span>&gt;</span>I

" Ctrl + S 保存文件
map <span class="tag">&lt;<span class="title">C-S</span>&gt;</span> <span class="tag">&lt;<span class="title">ESC</span>&gt;</span>:w<span class="tag">&lt;<span class="title">CR</span>&gt;</span>
imap <span class="tag">&lt;<span class="title">C-S</span>&gt;</span> <span class="tag">&lt;<span class="title">ESC</span>&gt;</span>:w<span class="tag">&lt;<span class="title">CR</span>&gt;</span>a
vmap <span class="tag">&lt;<span class="title">C-S</span>&gt;</span> <span class="tag">&lt;<span class="title">ESC</span>&gt;</span>:w<span class="tag">&lt;<span class="title">CR</span>&gt;</span>
" Ctrl + B 调出TagList插件
map <span class="tag">&lt;<span class="title">C-B</span>&gt;</span> <span class="tag">&lt;<span class="title">ESC</span>&gt;</span>:Tlist<span class="tag">&lt;<span class="title">CR</span>&gt;</span>
imap <span class="tag">&lt;<span class="title">C-B</span>&gt;</span> <span class="tag">&lt;<span class="title">ESC</span>&gt;</span>:Tlist<span class="tag">&lt;<span class="title">CR</span>&gt;</span>
vmap <span class="tag">&lt;<span class="title">C-B</span>&gt;</span> <span class="tag">&lt;<span class="title">ESC</span>&gt;</span>:Tlist<span class="tag">&lt;<span class="title">CR</span>&gt;</span>

" Shift + C 选中状态下复制
vnoremap <span class="tag">&lt;<span class="title">S-C</span>&gt;</span> "+y

" Shift + V 粘贴剪切板中的内容
map <span class="tag">&lt;<span class="title">S-V</span>&gt;</span> "+p
"imap <span class="tag">&lt;<span class="title">S-V</span>&gt;</span> <span class="tag">&lt;<span class="title">esc</span>&gt;</span>"+pa
vmap <span class="tag">&lt;<span class="title">S-V</span>&gt;</span> d"+P

" Ctrl + E 一步加载语法模板和作者、时间信息 [非插入模式]
map <span class="tag">&lt;<span class="title">C-E</span>&gt;</span> <span class="tag">&lt;<span class="title">ESC</span>&gt;</span>:AuthorInfoDetect<span class="tag">&lt;<span class="title">CR</span>&gt;</span><span class="tag">&lt;<span class="title">ESC</span>&gt;</span>Gi
vmap <span class="tag">&lt;<span class="title">C-E</span>&gt;</span> <span class="tag">&lt;<span class="title">ESC</span>&gt;</span>:AuthorInfoDetect<span class="tag">&lt;<span class="title">CR</span>&gt;</span><span class="tag">&lt;<span class="title">ESC</span>&gt;</span>Gi

" Ctrl + E 在当前行添加C语言注释 [插入模式]
imap <span class="tag">&lt;<span class="title">C-E</span>&gt;</span> /*  <span class="tag">&lt;<span class="title">ESC</span>&gt;</span>hhi

" ^z快速进入shell
nmap <span class="tag">&lt;<span class="title">C-.</span>&gt;</span> :shell<span class="tag">&lt;<span class="title">cr</span>&gt;</span>

" ######### 括号、引号、中括号等自动匹配 ######### "

:inoremap ( ()<span class="tag">&lt;<span class="title">ESC</span>&gt;</span>i

:inoremap ) <span class="tag">&lt;<span class="title">c-r</span>&gt;</span>=ClosePair(')')<span class="tag">&lt;<span class="title">CR</span>&gt;</span>

:inoremap { {}<span class="tag">&lt;<span class="title">ESC</span>&gt;</span>i

:inoremap } <span class="tag">&lt;<span class="title">c-r</span>&gt;</span>=ClosePair('}')<span class="tag">&lt;<span class="title">CR</span>&gt;</span>

:inoremap [ []<span class="tag">&lt;<span class="title">ESC</span>&gt;</span>i

:inoremap ] <span class="tag">&lt;<span class="title">c-r</span>&gt;</span>=ClosePair(']')<span class="tag">&lt;<span class="title">CR</span>&gt;</span>
":inoremap <span class="tag">&lt; &lt;&gt;</span><span class="tag">&lt;<span class="title">ESC</span>&gt;</span>i

:inoremap &gt; <span class="tag">&lt;<span class="title">c-r</span>&gt;</span>=ClosePair('&gt;')<span class="tag">&lt;<span class="title">CR</span>&gt;</span>

:inoremap " ""<span class="tag">&lt;<span class="title">ESC</span>&gt;</span>i

:inoremap ' ''<span class="tag">&lt;<span class="title">ESC</span>&gt;</span>i

:inoremap ` ``<span class="tag">&lt;<span class="title">ESC</span>&gt;</span>i

 function ClosePair(char)
    if getline('.')[col('.') - 1] == a:char
        return "\<span class="tag">&lt;<span class="title">Right</span>&gt;</span>"
    else
        return a:char
    endif
endf
 

" ######### 一键保存和编译 ######### "

" 编译C源文件
func! CompileGcc()
    exec "w"
    let compilecmd="!gcc -Wall -std=c99 "
    let compileflag="-o %<span class="tag">&lt;<span class="title">"
</span>    <span class="attribute">exec</span> <span class="attribute">compilecmd.</span>" % "<span class="attribute">.compileflag</span>
<span class="attribute">endfunc</span>

" 编译<span class="attribute">C</span>++源文件
<span class="attribute">func</span>! <span class="attribute">CompileCpp</span>()
    <span class="attribute">exec</span> "<span class="attribute">w</span>"
    <span class="attribute">let</span> <span class="attribute">compilecmd</span>=<span class="value">"!g++ -Wall "</span>
    <span class="attribute">let</span> <span class="attribute">compileflag</span>=<span class="value">"-o %&lt;"</span>
    <span class="attribute">exec</span> <span class="attribute">compilecmd.</span>" % "<span class="attribute">.compileflag</span>
<span class="attribute">endfunc</span>

" 编译<span class="attribute">Haskell</span>源文件
<span class="attribute">func</span>! <span class="attribute">CompileHaskell</span>()
    <span class="attribute">exec</span> "<span class="attribute">w</span>"
    <span class="attribute">let</span> <span class="attribute">compilecmd</span>=<span class="value">"!ghc --make "</span>
    <span class="attribute">let</span> <span class="attribute">compileflag</span>=<span class="value">"-o %&lt;"</span>
    <span class="attribute">exec</span> <span class="attribute">compilecmd.</span>" % "<span class="attribute">.compileflag</span>
<span class="attribute">endfunc</span>

" 编译<span class="attribute">Java</span>源文件
<span class="attribute">func</span>! <span class="attribute">CompileJava</span>()
    <span class="attribute">exec</span> "<span class="attribute">w</span>"
    <span class="attribute">exec</span> "!<span class="attribute">javac</span> %"
<span class="attribute">endfunc</span>

" 编译<span class="attribute">C</span>#源文件
<span class="attribute">func</span>! <span class="attribute">CompileCs</span>()
    <span class="attribute">exec</span> "<span class="attribute">w</span>"
    <span class="attribute">exec</span> "!<span class="attribute">csc</span> %"
<span class="attribute">endfunc</span>

" 编译<span class="attribute">Gas</span>源文件
<span class="attribute">func</span>! <span class="attribute">CompileGas</span>()
    <span class="attribute">exec</span> "<span class="attribute">w</span>"
    <span class="attribute">exec</span> "!<span class="attribute">gcc</span> <span class="attribute">-Wall</span> <span class="attribute">-ggdb</span> <span class="attribute">-o</span> %&lt; %"
<span class="attribute">endfunc</span>

" 运行<span class="attribute">Shell</span>源文件
<span class="attribute">func</span>! <span class="attribute">RunShell</span>()
    <span class="attribute">exec</span> "<span class="attribute">w</span>"
    <span class="attribute">exec</span> "!<span class="attribute">sh</span> %"
<span class="attribute">endfunc</span>

" 运行<span class="attribute">Lua</span>源文件
<span class="attribute">func</span>! <span class="attribute">RunLua</span>()
    <span class="attribute">exec</span> "<span class="attribute">w</span>"
    <span class="attribute">exec</span> "!<span class="attribute">lua</span> %"
<span class="attribute">endfunc</span>

" 运行<span class="attribute">Perl</span>源文件
<span class="attribute">func</span>! <span class="attribute">RunPerl</span>()
    <span class="attribute">exec</span> "<span class="attribute">w</span>"
    <span class="attribute">exec</span> "!<span class="attribute">perl</span> %"
<span class="attribute">endfunc</span>

" 运行<span class="attribute">Python</span>源文件
<span class="attribute">func</span>! <span class="attribute">RunPython</span>()
    <span class="attribute">exec</span> "<span class="attribute">w</span>"
    <span class="attribute">exec</span> "!<span class="attribute">python</span> %"
<span class="attribute">endfunc</span>

" 运行<span class="attribute">Ruby</span>源文件
<span class="attribute">func</span>! <span class="attribute">RunRuby</span>()
    <span class="attribute">exec</span> "<span class="attribute">w</span>"
    <span class="attribute">exec</span> "!<span class="attribute">ruby</span> %"
<span class="attribute">endfunc</span>


" 根据文件类型自动选择相应的编译函数
<span class="attribute">func</span>! <span class="attribute">CompileCode</span>()
        <span class="attribute">exec</span> "<span class="attribute">w</span>"
        <span class="attribute">if</span> &<span class="attribute">filetype</span> =<span class="value">=</span> "<span class="attribute">c</span>"
            <span class="attribute">exec</span> "<span class="attribute">call</span> <span class="attribute">CompileGcc</span>()"
        <span class="attribute">elseif</span> &<span class="attribute">filetype</span> =<span class="value">=</span> "<span class="attribute">cpp</span>"
            <span class="attribute">exec</span> "<span class="attribute">call</span> <span class="attribute">CompileCpp</span>()"
        <span class="attribute">elseif</span> &<span class="attribute">filetype</span> =<span class="value">=</span> "<span class="attribute">haskell</span>"
            <span class="attribute">exec</span> "<span class="attribute">call</span> <span class="attribute">CompileHaskell</span>()"
        <span class="attribute">elseif</span> &<span class="attribute">filetype</span> =<span class="value">=</span> "<span class="attribute">java</span>"
            <span class="attribute">exec</span> "<span class="attribute">call</span> <span class="attribute">CompileJava</span>()"
        <span class="attribute">elseif</span> &<span class="attribute">filetype</span> =<span class="value">=</span> "<span class="attribute">cs</span>"
            <span class="attribute">exec</span> "<span class="attribute">call</span> <span class="attribute">CompileCs</span>()"
        <span class="attribute">elseif</span> &<span class="attribute">filetype</span> =<span class="value">=</span> "<span class="attribute">asm</span>"
            <span class="attribute">exec</span> "<span class="attribute">call</span> <span class="attribute">CompileGas</span>()"
        <span class="attribute">elseif</span> &<span class="attribute">filetype</span> =<span class="value">=</span> "<span class="attribute">sh</span>"
            <span class="attribute">exec</span> "<span class="attribute">call</span> <span class="attribute">RunShell</span>()"
        <span class="attribute">elseif</span> &<span class="attribute">filetype</span> =<span class="value">=</span> "<span class="attribute">lua</span>"
            <span class="attribute">exec</span> "<span class="attribute">call</span> <span class="attribute">RunLua</span>()"
       <span class="attribute">elseif</span> &<span class="attribute">filetype</span> =<span class="value">=</span> "<span class="attribute">perl</span>"
            <span class="attribute">exec</span> "<span class="attribute">call</span> <span class="attribute">RunPerl</span>()"
        <span class="attribute">elseif</span> &<span class="attribute">filetype</span> =<span class="value">=</span> "<span class="attribute">python</span>"
            <span class="attribute">exec</span> "<span class="attribute">call</span> <span class="attribute">RunPython</span>()"
        <span class="attribute">elseif</span> &<span class="attribute">filetype</span> =<span class="value">=</span> "<span class="attribute">ruby</span>"
            <span class="attribute">exec</span> "<span class="attribute">call</span> <span class="attribute">RunRuby</span>()"
        <span class="attribute">endif</span>
<span class="attribute">endfunc</span>

" 运行可执行文件
<span class="attribute">func</span>! <span class="attribute">RunResult</span>()
        <span class="attribute">exec</span> "<span class="attribute">w</span>"
        <span class="attribute">if</span> &<span class="attribute">filetype</span> =<span class="value">=</span> "<span class="attribute">c</span>"
            <span class="attribute">exec</span> "! <span class="attribute">.</span>/%&lt;"
        <span class="attribute">elseif</span> &<span class="attribute">filetype</span> =<span class="value">=</span> "<span class="attribute">cpp</span>"
            <span class="attribute">exec</span> "! <span class="attribute">.</span>/%&lt;"
        <span class="attribute">elseif</span> &<span class="attribute">filetype</span> =<span class="value">=</span> "<span class="attribute">haskell</span>"
            <span class="attribute">exec</span> "! <span class="attribute">.</span>/%&lt;"
        <span class="attribute">elseif</span> &<span class="attribute">filetype</span> =<span class="value">=</span> "<span class="attribute">java</span>"
            <span class="attribute">exec</span> "!<span class="attribute">java</span> %&lt;"
        <span class="attribute">elseif</span> &<span class="attribute">filetype</span> =<span class="value">=</span> "<span class="attribute">cs</span>"
            <span class="attribute">exec</span> "! <span class="attribute">.</span>/%&lt;"
        <span class="attribute">elseif</span> &<span class="attribute">filetype</span> =<span class="value">=</span> "<span class="attribute">asm</span>"
            <span class="attribute">exec</span> "! <span class="attribute">.</span>/%&lt;"
        <span class="attribute">elseif</span> &<span class="attribute">filetype</span> =<span class="value">=</span> "<span class="attribute">sh</span>"
            <span class="attribute">exec</span> "!<span class="attribute">sh</span> <span class="attribute">.</span>/%&lt;<span class="attribute">.sh</span>"
        <span class="attribute">elseif</span> &<span class="attribute">filetype</span> =<span class="value">=</span> "<span class="attribute">lua</span>"
            <span class="attribute">exec</span> "!<span class="attribute">lua</span> <span class="attribute">.</span>/%&lt;<span class="attribute">.lua</span>"
        <span class="attribute">elseif</span> &<span class="attribute">filetype</span> =<span class="value">=</span> "<span class="attribute">perl</span>"
            <span class="attribute">exec</span> "!<span class="attribute">perl</span> <span class="attribute">.</span>/%&lt;<span class="attribute">.pl</span>"
        <span class="attribute">elseif</span> &<span class="attribute">filetype</span> =<span class="value">=</span> "<span class="attribute">python</span>"
            <span class="attribute">exec</span> "!<span class="attribute">python</span> <span class="attribute">.</span>/%&lt;<span class="attribute">.py</span>"
        <span class="attribute">elseif</span> &<span class="attribute">filetype</span> =<span class="value">=</span> "<span class="attribute">ruby</span>"
            <span class="attribute">exec</span> "!<span class="attribute">ruby</span> <span class="attribute">.</span>/%&lt;<span class="attribute">.rb</span>"
        <span class="attribute">endif</span>
<span class="attribute">endfunc</span>

"&lt;<span class="attribute">F10</span>&gt;</span>  gdb调试
map <span class="tag">&lt;<span class="title">F10</span>&gt;</span> :call Debug()<span class="tag">&lt;<span class="title">CR</span>&gt;</span>
func!  Debug()
exec "w"
exec "!gcc % -o %<span class="tag">&lt; <span class="attribute">-gstabs</span>+"
<span class="attribute">exec</span> "!<span class="attribute">gdb</span> <span class="attribute">.</span>/%&lt;"
<span class="attribute">endfunc</span>



" <span class="attribute">Ctrl</span> + <span class="attribute">C</span> 一键保存、编译
" <span class="attribute">Ctrl</span> + <span class="attribute">R</span> 一键保存、运行
<span class="attribute">map</span> &lt;<span class="attribute">C-C</span>&gt;</span> :call CompileCode()<span class="tag">&lt;<span class="title">CR</span>&gt;</span>
imap <span class="tag">&lt;<span class="title">C-C</span>&gt;</span> <span class="tag">&lt;<span class="title">ESC</span>&gt;</span>:call CompileCode()<span class="tag">&lt;<span class="title">CR</span>&gt;</span>
vmap <span class="tag">&lt;<span class="title">C-C</span>&gt;</span> <span class="tag">&lt;<span class="title">ESC</span>&gt;</span>:call CompileCode()<span class="tag">&lt;<span class="title">CR</span>&gt;</span>

nnoremap  <span class="tag">&lt;<span class="title">Leader</span>&gt;</span><span class="tag">&lt;<span class="title">Leader</span>&gt;</span>run :call RunResult()<span class="tag">&lt;<span class="title">CR</span>&gt;</span>
" imap <span class="tag">&lt;<span class="title">C-R</span>&gt;</span> <span class="tag">&lt;<span class="title">ESC</span>&gt;</span>:call RunResult()<span class="tag">&lt;<span class="title">CR</span>&gt;</span>
" vmap <span class="tag">&lt;<span class="title">C-R</span>&gt;</span> <span class="tag">&lt;<span class="title">ESC</span>&gt;</span>:call RunResult()<span class="tag">&lt;<span class="title">CR</span>&gt;</span>



" let Tlist_Ctags_Cmd = '/usr/local/bin/ctags'


" ----------------------------------- PLUG ------------------------------------
" ----------------------------------- PLUG ------------------------------------
" ----------------------------------- PLUG ------------------------------------

" ---------- The Specification of The Plugs 主要插件详细用法说明 ---------------------
" :Budlexxxx		 -- [vundle]
" :Tlist                 --呼出变量和函数列表 [TagList插件]
" :FencView              --查看文件编码和更改文件编码 [FencView插件]
" :LoadTemplate          --呼出语法模板 [Load_Template插件]
" :AuthorInfoDetect      --添加作者、时间等信息 [NERD_commenter && authorinfo插件]


" ----------------------------------- vundel ------------------------------------
" vundle 
set rtp+=~/.vim/bundle/vundle/  " 增加runtimePath的路径 

call vundle#rc() 				" 启动vundle

" let Vundle manage Vundle

" required!

Bundle 'gmarik/vundle'


" My Bundles here: /* 插件配置格式 */

"

" original repos on github （Github网站上非vim-scripts仓库的插件，按下面格式填写）

	" colors 

" Bundle 'altercation/solarized'

	" Plug In
 
Bundle 'tpope/vim-fugitive'
Bundle 'Lokaltog/vim-easymotion'
Bundle 'rstacruz/sparkup', {'rtp': 'vim/'}
" Bundle 'tpope/vim-rails.git'		" something for Ruby

" vim-scripts repos （vim-scripts仓库里的，按下面格式填写）

	" Plug In

Bundle 'L9'
Bundle 'FuzzyFinder'
Bundle 'taglist.vim'
Bundle 'LaTeX-Box'
Bundle 'a.vim'
Bundle 'AuthorInfo'

" Can not work without cmake+python-dev
Bundle 'Valloric/YouCompleteMe'
" Bundle 'Chiel92/vim-autoformat'
Bundle'scrooloose/nerdtree'
Bundle'winmanager'
Bundle 'kien/ctrlp.vim'
Bundle 'bling/vim-airline'
Bundle 'xieyu/pyclewn'
Bundle 'scrooloose/nerdcommenter'
" Bundle'scrooloose/syntastic'	" a static syntax checker
	" colors
Bundle 'molokai'
Bundle 'desert256.vim'

" non github repos （非上面两种情况的，按下面格式填写）

" Bundle 'git://git.wincent.com/command-t.git'



" /** vundle命令 **/

" Brief help

" :BundleList - list configured bundles

" :BundleInstall(!) - install(update) bundles

" :BundleSearch(!) foo - search(or refresh cache first) for foo

" :BundleClean(!) - confirm(or auto-approve) removal of unused bundles


" see :h vundle for more details or wiki for FAQ

" NOTE: comments after Bundle command are not allowed..

" ----------------------------------- vundel end ------------------------------------

" ----------------------------------- GUI gvim ------------------------------------

" Determine the terminal or gvim
if has("gui_running")
    let g:isGUI = 1
" Color for gvim
colorscheme desert         
nmap <span class="tag">&lt;<span class="title">Leader</span>&gt;</span>mo : colorscheme molokai <span class="tag">&lt;<span class="title">CR</span>&gt;</span>
nmap <span class="tag">&lt;<span class="title">Leader</span>&gt;</span>de : colorscheme desert <span class="tag">&lt;<span class="title">CR</span>&gt;</span>

else
    let g:isGUI = 0
" Color for vim
colorscheme molokai     
endif

" ----------------------------------- GUI gvim end ------------------------------------
 
" ctags + cscope {

" 更新ctags和cscope索引
" href: http://www.vimer.cn/2009/10/把vim打造成一个真正的ide2.html
" 稍作修改，提取出DeleteFile函数，修改ctags和cscope执行命令
map <span class="tag">&lt;<span class="title">F12</span>&gt;</span> :call Do_CsTag()<span class="tag">&lt;<span class="title">cr</span>&gt;</span>
function! Do_CsTag()
    let dir = getcwd()

    "先删除已有的tags和cscope文件，如果存在且无法删除，则报错。
    if ( DeleteFile(dir, "tags") ) 
        return 
    endif
    if ( DeleteFile(dir, "cscope.files") ) 
        return 
    endif
    if ( DeleteFile(dir, "cscope.out") ) 
        return z
    endif

    if(executable('ctags'))
        silent! execute "!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q ."
    endif
    if(executable('cscope') && has("cscope") )
        if(g:isWin)
            silent! execute "!dir /s/b *.c,*.cpp,*.h,*.java,*.cs &gt;&gt; cscope.files"
        else
            silent! execute "!find . -iname '*.[ch]' -o -name '*.cpp' &gt; cscope.files"
        endif
        silent! execute "!cscope -b"
        execute "normal :"
        if filereadable("cscope.out")
            execute "cs add cscope.out"
        endif
    endif
    " 刷新屏幕
    execute "redr!"
endfunction

function! DeleteFile(dir, filename)
    if filereadable(a:filename)
        if (g:isWin)
            let ret = delete(a:dir."\\".a:filename)
        else
            let ret = delete("./".a:filename)
        endif
        if (ret != 0)
            echohl WarningMsg | echo "Failed to delete ".a:filename | echohl None
            return 1
        else
            return 0
        endif
    endif
    return 0
endfunction

" cscope 绑定
if has("cscope")
    set csto=1
    set cst
    set nocsverb
    if filereadable("cscope.out")
        cs add cscope.out
    endif
    set csverb
    " s: C语言符号  g: 定义     d: 这个函数调用的函数 c: 调用这个函数的函数
    " t: 文本       e: egrep模式    f: 文件     i: include本文件的文件
    "let mapleader = ","
    "let g:mapleader = ","
    nmap <span class="tag">&lt;<span class="title">leader</span>&gt;</span>fs :cs find s <span class="tag">&lt;<span class="title">C-R</span>&gt;</span>=expand("<span class="tag">&lt;<span class="title">cword</span>&gt;</span>")<span class="tag">&lt;<span class="title">CR</span>&gt;</span><span class="tag">&lt;<span class="title">CR</span>&gt;</span>
    nmap <span class="tag">&lt;<span class="title">leader</span>&gt;</span>fg :cs find g <span class="tag">&lt;<span class="title">C-R</span>&gt;</span>=expand("<span class="tag">&lt;<span class="title">cword</span>&gt;</span>")<span class="tag">&lt;<span class="title">CR</span>&gt;</span><span class="tag">&lt;<span class="title">CR</span>&gt;</span>
    nmap <span class="tag">&lt;<span class="title">leader</span>&gt;</span>fc :cs find c <span class="tag">&lt;<span class="title">C-R</span>&gt;</span>=expand("<span class="tag">&lt;<span class="title">cword</span>&gt;</span>")<span class="tag">&lt;<span class="title">CR</span>&gt;</span><span class="tag">&lt;<span class="title">CR</span>&gt;</span>
    nmap <span class="tag">&lt;<span class="title">leader</span>&gt;</span>ft :cs find t <span class="tag">&lt;<span class="title">C-R</span>&gt;</span>=expand("<span class="tag">&lt;<span class="title">cword</span>&gt;</span>")<span class="tag">&lt;<span class="title">CR</span>&gt;</span><span class="tag">&lt;<span class="title">CR</span>&gt;</span>
    nmap <span class="tag">&lt;<span class="title">leader</span>&gt;</span>fe :cs find e <span class="tag">&lt;<span class="title">C-R</span>&gt;</span>=expand("<span class="tag">&lt;<span class="title">cword</span>&gt;</span>")<span class="tag">&lt;<span class="title">CR</span>&gt;</span><span class="tag">&lt;<span class="title">CR</span>&gt;</span>
    nmap <span class="tag">&lt;<span class="title">leader</span>&gt;</span>F :cs find f <span class="tag">&lt;<span class="title">C-R</span>&gt;</span>=expand("<span class="tag">&lt;<span class="title">cfile</span>&gt;</span>")<span class="tag">&lt;<span class="title">CR</span>&gt;</span><span class="tag">&lt;<span class="title">CR</span>&gt;</span>
    nmap <span class="tag">&lt;<span class="title">leader</span>&gt;</span>fi :cs find i <span class="tag">&lt;<span class="title">C-R</span>&gt;</span>=expand("<span class="tag">&lt;<span class="title">cfile</span>&gt;</span>")<span class="tag">&lt;<span class="title">CR</span>&gt;</span>$<span class="tag">&lt;<span class="title">CR</span>&gt;</span>
    nmap <span class="tag">&lt;<span class="title">leader</span>&gt;</span>fd :cs find d <span class="tag">&lt;<span class="title">C-R</span>&gt;</span>=expand("<span class="tag">&lt;<span class="title">cword</span>&gt;</span>")<span class="tag">&lt;<span class="title">CR</span>&gt;</span><span class="tag">&lt;<span class="title">CR</span>&gt;</span>

endif

" }


" ---------- 主要插件详细用法说明 ---------------------

" :Tlist                 --呼出变量和函数列表 [TagList插件]
" :FencView              --查看文件编码和更改文件编码 [FencView插件]
" :LoadTemplate          --呼出语法模板 [Load_Template插件]
" :AuthorInfoDetect      --添加作者、时间等信息 [NERD_commenter && authorinfo插件]

" ---------- a.vim [自动切换C/C++同名头文件] ----------
"
" :A                     --切换同名头文件并独占整个屏幕
" :AS                    --切换同名头文件并垂直分屏，头文件在上
" :AV                    --切换同名头文件并水平分割，头文件在左

" ---------- mark.vim [追踪高亮指定关键字] ------------
"
" \m                     --normal模式下，在想要高亮的单词上面敲击\m即可高亮或取消高亮该单词
" :Mark                  --取消所有高亮
" :Mark abc              --指定高亮单词 abc 或取消高亮 abc




" Airline {

if has("gui_running")
	let g:airline_theme="light"
endif
set laststatus=2
" 使用powerline打过补丁的字体
 let g:airline_powerline_fonts = 1
" 开启tabline
let g:airline#extensions#tabline#enabled = 1
" tabline中当前buffer两端的分隔字符
let g:airline#extensions#tabline#left_sep = ' '
" tabline中未激活buffer两端的分隔字符
let g:airline#extensions#tabline#left_alt_sep = '|'
" tabline中buffer显示编号
let g:airline#extensions#tabline#buffer_nr_show = 1
" 映射切换buffer的键位
nnoremap [b :bp<span class="tag">&lt;<span class="title">CR</span>&gt;</span>
nnoremap ]b :bn<span class="tag">&lt;<span class="title">CR</span>&gt;</span>

"}

" authorinfo {

" NERD_commenter && authorinfo 自动添加作者、时间等信息，使用:AuthorInfoDetect
let g:vimrc_author='Galaxy2416'
let g:vimrc_email='sunxiao.gin@gmail.com'
let g:vimrc_homepage='Compiler: gcc&&g++'
let g:vimrc_history='gcc&&g++'
nmap <span class="tag">&lt;<span class="title">C-E</span>&gt;</span> :AuthorInfoDetect<span class="tag">&lt;<span class="title">cr</span>&gt;</span>
" }

" QuickFix {

" Quick Fix 设置
map <span class="tag">&lt;<span class="title">leader</span>&gt;</span>cw :copen<span class="tag">&lt;<span class="title">cr</span>&gt;</span>
map <span class="tag">&lt;<span class="title">F3</span>&gt;</span> :cp<span class="tag">&lt;<span class="title">cr</span>&gt;</span>
map <span class="tag">&lt;<span class="title">F4</span>&gt;</span> :cn<span class="tag">&lt;<span class="title">cr</span>&gt;</span>

" }

" A {
" A few of quick commands to swtich between source files and header files quickly.

" :A switches to the header file corresponding to the current file being edited (or vise versa)

" :AS splits and switches

" :AV vertical splits and switches

" }

" WinManager {

" 直接输入 wm 命令即可开启文件浏览窗口
let g:winManagerWindowLayout="NERDTree|TagList"
let g:NERDTree_title="[NERDTree]"
function! NERDTree_Start()  
    exec 'NERDTree'  
endfunction

function! NERDTree_IsValid()  
    return 1  
endfunction
nmap <span class="tag">&lt;<span class="title">silent</span>&gt;</span> wm :if IsWinManagerVisible() <span class="tag">&lt;<span class="title">BAR</span>&gt;</span> WMToggle<span class="tag">&lt;<span class="title">CR</span>&gt;</span> <span class="tag">&lt;<span class="title">BAR</span>&gt;</span> else <span class="tag">&lt;<span class="title">BAR</span>&gt;</span> WMToggle<span class="tag">&lt;<span class="title">CR</span>&gt;</span>:q<span class="tag">&lt;<span class="title">CR</span>&gt;</span> endif <span class="tag">&lt;<span class="title">CR</span>&gt;</span><span class="tag">&lt;<span class="title">CR</span>&gt;</span>
" }


" YouCompelteMe { 
" Bundle "davidhalter/jedi"
" https://valloric.github.io/YouCompleteMe/

" }


" TagList {
let Tlist_Ctags_Cmd= "ctags" 			
let Tlist_Use_Right_Window=0			"left
let Tlist_Show_One_File=0 			"让taglist可以同时展示多个文件的函数列表
let Tlist_File_Fold_Auto_Close=1 		"非当前文件，函数列表折叠隐藏
let Tlist_Exit_OnlyWindow=1 			"当taglist是最后一个分割窗口时，自动推出vim
"是否一直处理tags.1:处理;0:不处理
let Tlist_Process_File_Always=1 		"实时更新tags
let Tlist_Inc_Winwidth=0

" ctags
"set tags+=C:\Develop\MinGW\include\tags               " For MinGW
"set tags+=C:\Develop\GTK\include\tags                 " For GTK+

" }


"  NERDTree {
"
" :NERDTree              --启动NERDTree插件
" o [小写]               --切换当前文件或目录的打开、关闭状态
" u                      --打开上层目录
" p [小写]               --返回上层目录
" P [大写]               --返回根目录
" K                      --转到当前目录第一个节点
" J                      --转到当前目录最后的节点
" m                      --显示文件系统菜单 [增、删、移]
" ?                      --弹出帮助菜单
" q                      --退出该插件
let NERDTreeDirArrows = 0
" }

" ----------------------------------- FuzzyFinder -------------------------------------
"
" FuzzyFinder setup"</span><span class="expression">{{{
<span class="string">"
"</span><span class="variable">let</span> <span class="variable">g</span>:<span class="variable">fuf</span>_<span class="variable">modesDisable</span> = [ '<span class="variable">mrufile</span>', '<span class="variable">mrucmd</span>', ]
<span class="variable">let</span> <span class="variable">g</span>:<span class="variable">fuf</span>_<span class="variable">modesDisable</span> = []
<span class="variable">let</span> <span class="variable">g</span>:<span class="variable">fuf</span>_<span class="variable">mrufile</span>_<span class="variable">maxItem</span> = 400
<span class="variable">let</span> <span class="variable">g</span>:<span class="variable">fuf</span>_<span class="variable">mrucmd</span>_<span class="variable">maxItem</span> = 400
<span class="variable">nnoremap</span> &lt;<span class="variable">silent</span>&gt; <span class="variable">sj</span>     :<span class="variable">FufBuffer</span>&lt;<span class="variable">CR</span>&gt;
<span class="variable">nnoremap</span> &lt;<span class="variable">silent</span>&gt; <span class="variable">sk</span>     :<span class="variable">FufFileWithCurrentBufferDir</span>&lt;<span class="variable">CR</span>&gt;
<span class="variable">nnoremap</span> &lt;<span class="variable">silent</span>&gt; <span class="variable">sK</span>     :<span class="variable">FufFileWithFullCwd</span>&lt;<span class="variable">CR</span>&gt;
<span class="variable">nnoremap</span> &lt;<span class="variable">silent</span>&gt; <span class="variable">s</span>&lt;<span class="variable">C-k</span>&gt; :<span class="variable">FufFile</span>&lt;<span class="variable">CR</span>&gt;
<span class="variable">nnoremap</span> &lt;<span class="variable">silent</span>&gt; <span class="variable">sl</span>     :<span class="variable">FufCoverageFileChange</span>&lt;<span class="variable">CR</span>&gt;
<span class="variable">nnoremap</span> &lt;<span class="variable">silent</span>&gt; <span class="variable">sL</span>     :<span class="variable">FufCoverageFileChange</span>&lt;<span class="variable">CR</span>&gt;
<span class="variable">nnoremap</span> &lt;<span class="variable">silent</span>&gt; <span class="variable">s</span>&lt;<span class="variable">C-l</span>&gt; :<span class="variable">FufCoverageFileRegister</span>&lt;<span class="variable">CR</span>&gt;
<span class="variable">nnoremap</span> &lt;<span class="variable">silent</span>&gt; <span class="variable">sd</span>     :<span class="variable">FufDirWithCurrentBufferDir</span>&lt;<span class="variable">CR</span>&gt;
<span class="variable">nnoremap</span> &lt;<span class="variable">silent</span>&gt; <span class="variable">sD</span>     :<span class="variable">FufDirWithFullCwd</span>&lt;<span class="variable">CR</span>&gt;
<span class="variable">nnoremap</span> &lt;<span class="variable">silent</span>&gt; <span class="variable">s</span>&lt;<span class="variable">C-d</span>&gt; :<span class="variable">FufDir</span>&lt;<span class="variable">CR</span>&gt;
<span class="variable">nnoremap</span> &lt;<span class="variable">silent</span>&gt; <span class="variable">sn</span>     :<span class="variable">FufMruFile</span>&lt;<span class="variable">CR</span>&gt;
<span class="variable">nnoremap</span> &lt;<span class="variable">silent</span>&gt; <span class="variable">sN</span>     :<span class="variable">FufMruFileInCwd</span>&lt;<span class="variable">CR</span>&gt;
<span class="variable">nnoremap</span> &lt;<span class="variable">silent</span>&gt; <span class="variable">sm</span>     :<span class="variable">FufMruCmd</span>&lt;<span class="variable">CR</span>&gt;
<span class="variable">nnoremap</span> &lt;<span class="variable">silent</span>&gt; <span class="variable">su</span>     :<span class="variable">FufBookmarkFile</span>&lt;<span class="variable">CR</span>&gt;
<span class="variable">noremap</span> &lt;<span class="variable">silent</span>&gt; <span class="variable">s</span>&lt;<span class="variable">C-u</span>&gt; :<span class="variable">FufBookmarkFileAdd</span>&lt;<span class="variable">CR</span>&gt;
<span class="variable">vnoremap</span> &lt;<span class="variable">silent</span>&gt; <span class="variable">s</span>&lt;<span class="variable">C-u</span>&gt; :<span class="variable">FufBookmarkFileAddAsSelectedText</span>&lt;<span class="variable">CR</span>&gt;
<span class="variable">nnoremap</span> &lt;<span class="variable">silent</span>&gt; <span class="variable">si</span>     :<span class="variable">FufBookmarkDir</span>&lt;<span class="variable">CR</span>&gt;
<span class="variable">nnoremap</span> &lt;<span class="variable">silent</span>&gt; <span class="variable">s</span>&lt;<span class="variable">C-i</span>&gt; :<span class="variable">FufBookmarkDirAdd</span>&lt;<span class="variable">CR</span>&gt;
<span class="variable">nnoremap</span> &lt;<span class="variable">silent</span>&gt; <span class="variable">st</span>     :<span class="variable">FufTag</span>&lt;<span class="variable">CR</span>&gt;
<span class="variable">nnoremap</span> &lt;<span class="variable">silent</span>&gt; <span class="variable">sT</span>     :<span class="variable">FufTag</span>!&lt;<span class="variable">CR</span>&gt;
<span class="variable">nnoremap</span> &lt;<span class="variable">silent</span>&gt; <span class="variable">s</span>&lt;<span class="variable">C-</span>]&gt; :<span class="variable">FufTagWithCursorWord</span>!&lt;<span class="variable">CR</span>&gt;
<span class="variable">nnoremap</span> &lt;<span class="variable">silent</span>&gt; <span class="variable">s</span>,     :<span class="variable">FufBufferTag</span>&lt;<span class="variable">CR</span>&gt;
<span class="variable">nnoremap</span> &lt;<span class="variable">silent</span>&gt; <span class="variable">s</span>&lt;     :<span class="variable">FufBufferTag</span>!&lt;<span class="variable">CR</span>&gt;
<span class="variable">vnoremap</span> &lt;<span class="variable">silent</span>&gt; <span class="variable">s</span>,     :<span class="variable">FufBufferTagWithSelectedText</span>!&lt;<span class="variable">CR</span>&gt;
<span class="variable">vnoremap</span> &lt;<span class="variable">silent</span>&gt; <span class="variable">s</span>&lt;     :<span class="variable">FufBufferTagWithSelectedText</span>&lt;<span class="variable">CR</span>&gt;
<span class="variable">nnoremap</span> &lt;<span class="variable">silent</span>&gt; <span class="variable">s</span>}     :<span class="variable">FufBufferTagWithCursorWord</span>!&lt;<span class="variable">CR</span>&gt;
<span class="variable">nnoremap</span> &lt;<span class="variable">silent</span>&gt; <span class="variable">s.</span>     :<span class="variable">FufBufferTagAll</span>&lt;<span class="variable">CR</span>&gt;
<span class="variable">nnoremap</span> &lt;<span class="variable">silent</span>&gt; <span class="variable">s</span>&gt;     :<span class="variable">FufBufferTagAll</span>!&lt;<span class="variable">CR</span>&gt;
<span class="variable">vnoremap</span> &lt;<span class="variable">silent</span>&gt; <span class="variable">s.</span>     :<span class="variable">FufBufferTagAllWithSelectedText</span>!&lt;<span class="variable">CR</span>&gt;
<span class="variable">vnoremap</span> &lt;<span class="variable">silent</span>&gt; <span class="variable">s</span>&gt;     :<span class="variable">FufBufferTagAllWithSelectedText</span>&lt;<span class="variable">CR</span>&gt;
<span class="variable">nnoremap</span> &lt;<span class="variable">silent</span>&gt; <span class="variable">s</span>]     :<span class="variable">FufBufferTagAllWithCursorWord</span>!&lt;<span class="variable">CR</span>&gt;
<span class="variable">nnoremap</span> &lt;<span class="variable">silent</span>&gt; <span class="variable">sg</span>     :<span class="variable">FufTaggedFile</span>&lt;<span class="variable">CR</span>&gt;
<span class="variable">nnoremap</span> &lt;<span class="variable">silent</span>&gt; <span class="variable">sG</span>     :<span class="variable">FufTaggedFile</span>!&lt;<span class="variable">CR</span>&gt;
<span class="variable">nnoremap</span> &lt;<span class="variable">silent</span>&gt; <span class="variable">so</span>     :<span class="variable">FufJumpList</span>&lt;<span class="variable">CR</span>&gt;
<span class="variable">nnoremap</span> &lt;<span class="variable">silent</span>&gt; <span class="variable">sp</span>     :<span class="variable">FufChangeList</span>&lt;<span class="variable">CR</span>&gt;
<span class="variable">nnoremap</span> &lt;<span class="variable">silent</span>&gt; <span class="variable">sq</span>     :<span class="variable">FufQuickfix</span>&lt;<span class="variable">CR</span>&gt;
<span class="variable">nnoremap</span> &lt;<span class="variable">silent</span>&gt; <span class="variable">sy</span>     :<span class="variable">FufLine</span>&lt;<span class="variable">CR</span>&gt;
<span class="variable">nnoremap</span> &lt;<span class="variable">silent</span>&gt; <span class="variable">sh</span>     :<span class="variable">FufHelp</span>&lt;<span class="variable">CR</span>&gt;
<span class="variable">nnoremap</span> &lt;<span class="variable">silent</span>&gt; <span class="variable">se</span>     :<span class="variable">FufEditDataFile</span>&lt;<span class="variable">CR</span>&gt;
<span class="variable">nnoremap</span> &lt;<span class="variable">silent</span>&gt; <span class="variable">sr</span>     :<span class="variable">FufRenewCache</span>&lt;<span class="variable">CR</span>&gt;
<span class="string">"
"</span> \<span class="variable">fuz</span> <span class="variable">and</span> <span class="variable">shift</span>+<span class="variable">F</span>4 <span class="variable">call</span> <span class="variable">FuzzyFinder</span> <span class="variable">menu</span> <span class="string">""</span>{{{
<span class="string">"
function! GetAllCommands()
  redir =&gt; commands	"</span> <span class="variable">redirct</span> <span class="variable">messages</span> <span class="variable">to</span> <span class="variable">commands</span>
  <span class="variable">silent</span> <span class="variable">command</span>
  <span class="variable">redir</span> <span class="variable">END</span>
  <span class="variable">return</span> <span class="variable">map</span>((<span class="variable">split</span>(<span class="variable">commands</span>, <span class="string">"\n"</span>)[3:]),
      \      '<span class="string">":"</span> <span class="variable">.</span> <span class="variable">matchstr</span>(<span class="variable">v</span>:<span class="variable">val</span>, ''^<span class="variable">....</span>\<span class="variable">zs</span>\<span class="variable">S</span>*'')')
<span class="variable">endfunction</span>

<span class="string">" 自定义命令行
let g:fuf_com_list=[':exe "</span><span class="variable">FufBuffer</span>                       <span class="string">" |"</span> <span class="variable">sj</span>     ',
                   \':<span class="variable">exe</span> <span class="string">"FufFileWithCurrentBufferDir     "</span> |<span class="string">" sk     ',
                   \':exe "</span><span class="variable">FufFileWithFullCwd</span>              <span class="string">" |"</span> <span class="variable">sK</span>     ',
                   \':<span class="variable">exe</span> <span class="string">"FufFile                         "</span> |<span class="string">" s ',
                   \':exe "</span><span class="variable">FufCoverageFileChange</span>           <span class="string">" |"</span> <span class="variable">sl</span>     ',
                   \':<span class="variable">exe</span> <span class="string">"FufCoverageFileChange           "</span> |<span class="string">" sL     ',
                   \':exe "</span><span class="variable">FufCoverageFileRegister</span>         <span class="string">" |"</span> <span class="variable">s</span> ',
                   \':<span class="variable">exe</span> <span class="string">"FufDirWithCurrentBufferDir      "</span> |<span class="string">" sd     ',
                   \':exe "</span><span class="variable">FufDirWithFullCwd</span>               <span class="string">" |"</span> <span class="variable">sD</span>     ',
                   \':<span class="variable">exe</span> <span class="string">"FufDir                          "</span> |<span class="string">" s ',
                   \':exe "</span><span class="variable">FufMruFile</span>                      <span class="string">" |"</span> <span class="variable">sn</span>     ',
                   \':<span class="variable">exe</span> <span class="string">"FufMruFileInCwd                 "</span> |<span class="string">" sN     ',
                   \':exe "</span><span class="variable">FufMruCmd</span>                       <span class="string">" |"</span> <span class="variable">sm</span>     ',
                   \':<span class="variable">exe</span> <span class="string">"FufBookmarkFile                 "</span> |<span class="string">" su     ',
                   \':exe "</span><span class="variable">FufBookmarkFileAdd</span>              <span class="string">" |"</span> <span class="variable">s</span> ',
                   \':<span class="variable">exe</span> <span class="string">"FufBookmarkFileAddAsSelectedText"</span> |<span class="string">" s ',
                   \':exe "</span><span class="variable">FufBookmarkDir</span>                  <span class="string">" |"</span> <span class="variable">si</span>     ',
                   \':<span class="variable">exe</span> <span class="string">"FufBookmarkDirAdd               "</span> |<span class="string">" s ',
                   \':exe "</span><span class="variable">FufTag</span>                          <span class="string">" |"</span> <span class="variable">st</span>     ',
                   \':<span class="variable">exe</span> <span class="string">"FufTag!                         "</span> |<span class="string">" sT     ',
                   \':exe "</span><span class="variable">FufTagWithCursorWord</span>!           <span class="string">" |"</span> <span class="variable">s</span> ',
                   \':<span class="variable">exe</span> <span class="string">"FufBufferTag                    "</span> |<span class="string">" s,     ',
                   \':exe "</span><span class="variable">FufBufferTag</span>!                   <span class="string">" |"</span> <span class="variable">s</span>&lt;     ',
                   \':<span class="variable">exe</span> <span class="string">"FufBufferTagWithSelectedText!   "</span> |<span class="string">" s,     ',
                   \':exe "</span><span class="variable">FufBufferTagWithSelectedText</span>    <span class="string">" |"</span> <span class="variable">s</span>&lt;     ',
                   \':<span class="variable">exe</span> <span class="string">"FufBufferTagWithCursorWord!     "</span> |<span class="string">" s}     ',
                   \':exe "</span><span class="variable">FufBufferTagAll</span>                 <span class="string">" |"</span> <span class="variable">s.</span>     ',
                   \':<span class="variable">exe</span> <span class="string">"FufBufferTagAll!                "</span> |<span class="string">" s&gt;     ',
                   \':exe "</span><span class="variable">FufBufferTagAllWithSelectedText</span>!<span class="string">" |"</span> <span class="variable">s.</span>     ',
                   \':<span class="variable">exe</span> <span class="string">"FufBufferTagAllWithSelectedText "</span> |<span class="string">" s&gt;     ',
                   \':exe "</span><span class="variable">FufBufferTagAllWithCursorWord</span>!  <span class="string">" |"</span> <span class="variable">s</span>]     ',
                   \':<span class="variable">exe</span> <span class="string">"FufTaggedFile                   "</span> |<span class="string">" sg     ',
                   \':exe "</span><span class="variable">FufTaggedFile</span>!                  <span class="string">" |"</span> <span class="variable">sG</span>     ',
                   \':<span class="variable">exe</span> <span class="string">"FufJumpList                     "</span> |<span class="string">" so     ',
                   \':exe "</span><span class="variable">FufChangeList</span>                   <span class="string">" |"</span> <span class="variable">sp</span>     ',
                   \':<span class="variable">exe</span> <span class="string">"FufQuickfix                     "</span> |<span class="string">" sq     ',
                   \':exe "</span><span class="variable">FufLine</span>                         <span class="string">" |"</span> <span class="variable">sy</span>     ',
                   \':<span class="variable">exe</span> <span class="string">"FufHelp                         "</span> |<span class="string">" sh     ',
                   \':exe "</span><span class="variable">FufEditDataFile</span>                 <span class="string">" |"</span> <span class="variable">se</span>     ',
                   \':<span class="variable">exe</span> <span class="string">"FufRenewCache                   "</span> |<span class="string">" sr     ',
                   \':exe "</span><span class="variable">FufDir</span> ~/<span class="string">"                        |"</span> <span class="variable">go</span> <span class="variable">to</span> ~', 
                   \':<span class="variable">exe</span> <span class="string">"FufFile ~/"</span>                       |<span class="string">" open file from ~', 
                   \]

nnoremap &lt;silent&gt; &lt;S-F4&gt; :call fuf#givencmd#launch('', 0, 'commands&gt;', GetAllCommands())&lt;CR&gt;
nnoremap &lt;silent&gt; &lt;Leader&gt;fuz :call fuf#givencmd#launch('', 0, 'commands&gt;', g:fuf_com_list)&lt;CR&gt;

"</span>{{{
<span class="string">" ----------------------------------- End FuzzyFinder -------------------------------------

"</span> <span class="variable">YouCompleteMe</span> {

<span class="variable">let</span> <span class="variable">g</span>:<span class="variable">ycm</span>_<span class="variable">global</span>_<span class="variable">ycm</span>_<span class="variable">extra</span>_<span class="variable">conf</span> = '~<span class="end-block">/.vim</span><span class="end-block">/bundle</span><span class="end-block">/YouCompleteMe</span><span class="end-block">/cpp</span><span class="end-block">/ycm</span><span class="end-block">/ycm</span>_<span class="variable">extra</span>_<span class="variable">conf.py</span>'

<span class="variable">let</span> <span class="variable">g</span>:<span class="variable">ycm</span>_<span class="variable">error</span>_<span class="variable">symbol</span> = '&gt;&gt;'
<span class="variable">let</span> <span class="variable">g</span>:<span class="variable">ycm</span>_<span class="variable">warning</span>_<span class="variable">symbol</span> = '&gt;*'
<span class="variable">nnoremap</span> &lt;<span class="variable">leader</span>&gt;<span class="variable">gl</span> :<span class="variable">YcmCompleter</span> <span class="variable">GoToDeclaration</span>&lt;<span class="variable">CR</span>&gt;
<span class="variable">nnoremap</span> &lt;<span class="variable">leader</span>&gt;<span class="variable">gf</span> :<span class="variable">YcmCompleter</span> <span class="variable">GoToDefinition</span>&lt;<span class="variable">CR</span>&gt;
<span class="variable">nnoremap</span> &lt;<span class="variable">leader</span>&gt;<span class="variable">gg</span> :<span class="variable">YcmCompleter</span> <span class="variable">GoToDefinitionElseDeclaration</span>&lt;<span class="variable">CR</span>&gt;
<span class="variable">nnoremap</span> &lt;<span class="variable">F</span>5&gt; :<span class="variable">YcmForceCompileAndDiagnostics</span>&lt;<span class="variable">CR</span>&gt;
<span class="variable">nnoremap</span> &lt;<span class="variable">C-F</span>5&gt; :<span class="variable">YcmDiags</span>&lt;<span class="variable">CR</span>&gt;

<span class="string">" }</span></span>
</pre></td></tr></table></figure>

</li>
</ul>
<p><center><em>gvimrc</em></center></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
</pre></td><td class="code"><pre>"autocmd FileType python <span class="keyword">set</span> ōmnifunc=pythoncomplete#Complete
"autocmd FileType javascrīpt <span class="keyword">set</span> ōmnifunc=javascrīptcomplete#CompleteJS
"autocmd FileType html <span class="keyword">set</span> ōmnifunc=htmlcomplete#CompleteTags
"autocmd FileType php <span class="keyword">set</span> ōmnifunc=phpcomplete#CompletePHP
"autocmd FileType c <span class="keyword">set</span> ōmnifunc=ccomplete#Complete
filetype plugin on
"<span class="keyword">set</span> tags += 

<span class="flow">if</span> has('win32')
    au GUIEnter * simalt ~x
<span class="flow">else</span>
    au GUIEnter * <span class="flow">call</span> MaximizeWindow()
endif
 
function! MaximizeWindow()
    silent !wmctrl -r :ACTIVE: -b add,maximized_vert,maximized_horz
endfunction

" <span class="keyword">set</span> guifont=Eunjin\ <span class="number">11</span>
<span class="keyword">set</span> guioptions+=m
<span class="keyword">set</span> guioptions-=m
<span class="keyword">set</span> guioptions-=T
map &lt;silent&gt; &lt;F2&gt; :<span class="flow">if</span> &guioptions =~# 'T' &lt;Bar&gt;
\<span class="keyword">set</span> guioptions-=T &lt;Bar&gt;
\<span class="keyword">set</span> guioptions-=m &lt;bar&gt;
\<span class="flow">else</span> &lt;Bar&gt;
\<span class="keyword">set</span> guioptions+=T &lt;Bar&gt;
\<span class="keyword">set</span> guioptions+=m &lt;Bar&gt;
\endif&lt;CR&gt;
</pre></td></tr></table></figure>

]]></content>
    <summary type="html"><![CDATA[<h2 id="vim-">vim配置文件</h2>
<h4 id="-">搜索路径</h4>
<p>vim的配置文件搜索路径从Local到Global的搜索顺序为：</p>
<ul>
<li><code>~/.vim/vimrc</code> -&gt; Local     </li>
<li><code>~/.vimrc</code> -&gt; Local</li>
<li><code>/etc/vim/vimrc</code> -&gt; Global</li>
</ul>
<h4 id="gvim-vim">GVIM于VIM</h4>
<p>Gvim会继承vim的配置文件，同时有.gvimrc的单独配置文件</p>
<ul>
<li><code>~/.vim/gvimrc</code> -&gt; Local     </li>
<li><code>~/.gvimrc</code> -&gt; Local</li>
<li><code>/etc/vim/gvimrc</code> -&gt; Global
]]></summary>
    
      <category term="vim" scheme="galaxy2416.github.io/categories/vim/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[vim系列之插件vundel]]></title>
    <link href="galaxy2416.github.io/2015/07/14/vundel/"/>
    <id>galaxy2416.github.io/2015/07/14/vundel/</id>
    <published>2015-07-14T15:00:53.000Z</published>
    <updated>2015-07-14T16:32:11.000Z</updated>
    <content type="html"><![CDATA[<h3 id="vim-vundel">vim系列之插件vundel</h3>
<p>系列说明：如果vim帮助你很多，请帮助乌干达的儿童。<a href="http://iccf-holland.org/" target="_blank">ICCF</a></p>
<p>环境如下：</p>
<ul>
<li>OS系统 : ubuntu 12.10</li>
<li>编辑器 : vim + gvim</li>
</ul>
<p>Vundle(Vim bundle) 是一个基于git的vim的插件管理器。它会把vim的插件用类似包管理的方式，
这样只需要在vimrc的配置文件中标记好相关的插件，就可以委托给vundel来下载，更新，删除</p>
<p>vundel项目在github中<a href="https://github.com/gmarik/vundle" target="_blank"><a href="https://github.com/gmarik/vundle">https://github.com/gmarik/vundle</a></a>
<a id="more"></a></p>
<h4 id="vundel-">vundel的安装</h4>
<ol>
<li>github的官网(或其它地方)下载下来，与一般插件无异，放置于<code>/.vim/bundle/vundle</code></li>
<li><code>git clone https://github.com/gmarik/vundle.git  ~/.vim/bundle/vundle</code></li>
</ol>
<h4 id="vundel-">vundel的配置</h4>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
</pre></td><td class="code"><pre>" <span class="comment">---------- The Specification of The Plugs 主要插件详细用法说明 ---------------------</span>
" :Budlexxxx		 <span class="comment">-- [vundle]</span>
" :Tlist                 <span class="comment">--呼出变量和函数列表 [TagList插件]</span>
" :FencView              <span class="comment">--查看文件编码和更改文件编码 [FencView插件]</span>
" :LoadTemplate          <span class="comment">--呼出语法模板 [Load_Template插件]</span>
" :AuthorInfoDetect      <span class="comment">--添加作者、时间等信息 [NERD_commenter && authorinfo插件]</span>


" <span class="comment">----------------------------------- vundel ------------------------------------</span>
" vundle 
<span class="operator"><span class="keyword">set</span> rtp+=~/.vim/bundle/vundle/  <span class="string">" 增加runtimePath的路径 

call vundle#rc() 				"</span> 启动vundle

<span class="string">" let Vundle manage Vundle

"</span> required!

Bundle <span class="string">'gmarik/vundle'</span>


<span class="string">" My Bundles here: /* 插件配置格式 */

"</span>

<span class="string">" original repos on github （Github网站上非vim-scripts仓库的插件，按下面格式填写）

	"</span> colors 

<span class="string">" Bundle 'altercation/solarized'

	"</span> Plug <span class="keyword">In</span>
 
Bundle <span class="string">'tpope/vim-fugitive'</span>
Bundle <span class="string">'Lokaltog/vim-easymotion'</span>
Bundle <span class="string">'rstacruz/sparkup'</span>, {<span class="string">'rtp'</span>: <span class="string">'vim/'</span>}
<span class="string">" Bundle 'tpope/vim-rails.git'		"</span> something <span class="keyword">for</span> Ruby

<span class="string">" vim-scripts repos （vim-scripts仓库里的，按下面格式填写）

	"</span> Plug <span class="keyword">In</span>

Bundle <span class="string">'L9'</span>
Bundle <span class="string">'FuzzyFinder'</span>
Bundle <span class="string">'taglist.vim'</span>
Bundle <span class="string">'LaTeX-Box'</span>
Bundle <span class="string">'a.vim'</span>
Bundle <span class="string">'AuthorInfo'</span>

<span class="string">" Can not work without cmake+python-dev
Bundle 'Valloric/YouCompleteMe'
"</span> Bundle <span class="string">'Chiel92/vim-autoformat'</span>
Bundle<span class="string">'scrooloose/nerdtree'</span>
Bundle<span class="string">'winmanager'</span>
Bundle <span class="string">'kien/ctrlp.vim'</span>
Bundle <span class="string">'bling/vim-airline'</span>
Bundle <span class="string">'xieyu/pyclewn'</span>
Bundle <span class="string">'scrooloose/nerdcommenter'</span>
<span class="string">" Bundle'scrooloose/syntastic'	"</span> a static syntax checker
	<span class="string">" colors
Bundle 'molokai'
Bundle 'desert256.vim'

"</span> non github repos （非上面两种情况的，按下面格式填写）

<span class="string">" Bundle 'git://git.wincent.com/command-t.git'



"</span> /** vundle命令 **/

<span class="string">" Brief help

"</span> :BundleList - list configured bundles

<span class="string">" :BundleInstall(!) - install(update) bundles

"</span> :BundleSearch(!) foo - search(<span class="keyword">or</span> refresh cache <span class="keyword">first</span>) <span class="keyword">for</span> foo

<span class="string">" :BundleClean(!) - confirm(or auto-approve) removal of unused bundles</span></span>
</pre></td></tr></table></figure>

<h4 id="vundel-">vundel的使用</h4>
<ul>
<li><code>:BundleList</code> - 列出安装的插件    </li>
<li><code>:BundleInstall</code> - 安装插件</li>
<li><code>:BundleUpdate</code> - 更新插件</li>
<li><code>:BundleSearch foo</code> - 查找foo</li>
<li><code>:BundleClean</code> - 移除无用插件</li>
</ul>
<hr>
<p>vundle的特色就是在vimrc中提供了所有插件的信息，只需要从github上下载和更新即可。只需一个vimrc就可以畅行天下。</p>
]]></content>
    <summary type="html"><![CDATA[<h3 id="vim-vundel">vim系列之插件vundel</h3>
<p>系列说明：如果vim帮助你很多，请帮助乌干达的儿童。<a href="http://iccf-holland.org/" target="_blank">ICCF</a></p>
<p>环境如下：</p>
<ul>
<li>OS系统 : ubuntu 12.10</li>
<li>编辑器 : vim + gvim</li>
</ul>
<p>Vundle(Vim bundle) 是一个基于git的vim的插件管理器。它会把vim的插件用类似包管理的方式，
这样只需要在vimrc的配置文件中标记好相关的插件，就可以委托给vundel来下载，更新，删除</p>
<p>vundel项目在github中<a href="https://github.com/gmarik/vundle" target="_blank"><a href="https://github.com/gmarik/vundle">https://github.com/gmarik/vundle</a></a>
]]></summary>
    
      <category term="vim" scheme="galaxy2416.github.io/categories/vim/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[hexo优化之代码块的颜色与背景]]></title>
    <link href="galaxy2416.github.io/2014/02/10/hexo_codecolor/"/>
    <id>galaxy2416.github.io/2014/02/10/hexo_codecolor/</id>
    <published>2014-02-10T12:16:46.000Z</published>
    <updated>2014-02-14T06:30:06.000Z</updated>
    <content type="html"><![CDATA[<p>hexo的代码块的浅色背景并不是受到很多人的喜欢，这个更改也很简单。</p>
<p>首先要更改<code>/theme/light/css/_partial/article.styl</code>中</p>
<a id="more"></a>

<p><strong>pre</strong> 下面第一行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>pre
	background <span class="comment">#颜色</span>
</pre></td></tr></table></figure>

<p><em>效果如下</em></p>
<p><img src="/img/hexo/codecolor.png" alt=""></p>
<p>之后更改<code>/theme/light/css/_partial/syntax.styl</code>中</p>
<p><strong>figure.highlight</strong> 下面第一行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>figure<span class="preprocessor">.highlight</span>
	background <span class="preprocessor">#颜色</span>
</pre></td></tr></table></figure>

<p><em>效果如下</em></p>
<p><img src="/img/hexo/codecolor2.png" alt=""></p>
<p><strong>建议这两个采用统一的颜色，前者是代码下面的背景，后者是区域剩下的背景。</strong></p>
<p>同文件下的.gutter下面的参数是调整左边的代码行数条，如果不喜欢行数和代码中间的白色分割线，那么把.gutter下的<code>border-right</code>和其下面.code的<code>border-left</code>宽度设为0或者颜色调成你所选用的背景色。那么就会有如下效果。当然也可以设成你喜欢的颜色。</p>
<p><img src="/img/hexo/codecolor1.png" alt=""></p>
<p>之后,在下面有一个.code的标签可以更改代码的颜色,默认的颜色不适合深色的背景。最后为了代码在这个背景下不会有模糊感，要删除掉shadow。注释掉或者删除掉figure.highlight下的<code>text-shadow ...</code> 就可以了。</p>
<p><em>GOOD LUCK</em></p>
]]></content>
    <summary type="html"><![CDATA[<p>hexo的代码块的浅色背景并不是受到很多人的喜欢，这个更改也很简单。</p>
<p>首先要更改<code>/theme/light/css/_partial/article.styl</code>中</p>
]]></summary>
    
      <category term="hexo" scheme="galaxy2416.github.io/categories/hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[avr系列:(二)avrdude的使用简介和AVR熔丝位]]></title>
    <link href="galaxy2416.github.io/2014/02/07/linux-avr-2/"/>
    <id>galaxy2416.github.io/2014/02/07/linux-avr-2/</id>
    <published>2014-02-07T03:27:57.000Z</published>
    <updated>2014-02-07T04:25:48.000Z</updated>
    <content type="html"><![CDATA[<h3 id="-ubuntu-atmeg16-avr-gcc-usbasp-dragon_jtag-">此篇以Ubuntu下的atmeg16，avr-gcc + usbasp (dragon_jtag)来进行说明。</h3>
<p><strong>由于文章迁移手头没有avr一部分图片用的以前的，看颜色也能看出来，会在后期改掉的，但效果是ok的</strong></p>
<h4 id="-avrdude-">简述了下avrdude的使用和熔丝位的基本情况。</h4>
<p><a id="more"></a>
环境如下：</p>
<ul>
<li>OS系统：ubuntu 12.04</li>
<li>编译器 ：avr-gcc</li>
<li>烧录软件 :avrdude</li>
</ul>
<p>仿真器or烧录器：dragon和usbasp（使用较多）</p>
<hr>
<p>对器件进行控制需要先进入AVRDUDE的终端模式。打开终端输入</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>sudo avrdude <span class="attribute">-P</span> usb <span class="attribute">-p</span> m16 <span class="attribute">-c</span> usbasp <span class="attribute">-t</span>
</pre></td></tr></table></figure>

<p><span style="color:#ff6666">usbasp+m16:</span></p>
<p><img src="/img/linux-avr-2/pro1.jpg" alt="pro1.jpg"></p>
<p><span style="font-size:18px; font-size:16pt">输入part</span></p>
<p>会输出很全面的信息
<img src="/img/linux-avr-2/pro2.jpg" alt="part"></p>
<p><span style="font-size:18px">进行操作并且擦除芯片来。</span>
<img src="/img/linux-avr-2/ee.jpg" alt="EEPROM"></p>
<p>可以看到可以直接对eeprom操作。</p>
<p><strong>熔丝位处理</strong></p>
<p>就么m16而言，熔丝位一共分为高8位低8位
<img src="/img/linux-avr-2/fues.png" alt="熔丝位"></p>
<p><span lang="zh-CN" style="background-color:rgb(255,153,0)">时钟源选择</span></p>
<p><span style="color:#cc0000">系统时钟源</span></p>
<ul>
<li>外部石英/陶瓷振荡器 1111-1010</li>
<li>外部低频晶振(32.768KHZ)1001(CKOPT=0：使用内部36pF电容)</li>
<li>外部RC振荡1000-0101</li>
<li>可校准的内部RC振荡 0100-0001</li>
<li>外部时钟0000</li>
<li>外部振荡器的不同工作模式</li>
</ul>
<p>熔丝位工作频率范围(MHz)C1、C2容量(pF)(仅适用石英晶振)</p>
<ul>
<li>CKOPTCKSEL3..1 </li>
<li>1 101 0.4-0.9 仅适合陶瓷振荡器</li>
<li>1110 0.9-3.0 12-22</li>
<li>1 111 3.0-8.0 12-22</li>
<li>0 101,110,111≥1.0 12-22</li>
</ul>
<p>当CKOPT被编程时振荡器在输出引脚产生满幅度的振荡。这种模式适合于噪声环境，以及需要通过XTAL2驱动第二个时钟缓冲器的情况。而且这种模式的频率范围比较宽。当保持CKOPT为未编程状态时，振荡器的输出信号幅度比较小。其优点是大大降低了功耗，但是频率范围比较窄，而且不能驱动其他时钟缓冲器。
对于谐振器，CKOPT未编程时的最大频率为8MHz，CKOPT编程时为16MHz。内部RC振荡器工作时不对CKOPT编程。</p>
<p>外部RC振荡器模式</p>
<p>熔丝位(CKSEL3..1)工作频率范围(MHz)</p>
<ul>
<li>0101≤0.9</li>
<li>0110 0.9-3.0</li>
<li>0111 3.0-8.0</li>
<li>10008.0-12.0
可校准内部RC振荡器工作模式</li>
</ul>
<p>熔丝位(CKSEL3..0)工作频率范围(MHz)</p>
<ul>
<li>0001 1.0</li>
<li>0010 2.0</li>
<li>0011 4.0</li>
<li>0100 8.0
JTAGEN：0=JTAG端口使能，1=JTAG端口禁止(不推荐)
OCDEN：0=JTAG DEBUG使用(JTAGICE会自动处理)</li>
</ul>
<p><span style="background-color:rgb(255,102,0)">BOOT区配置熔丝</span></p>
<p>BOOTSZ1 BOOTSZ0BOOT区大小BOOT区地址默认</p>
<ul>
<li>00 1024WORD 0x1C00 默认</li>
<li>01 512WORD 0x1E00 </li>
<li>1 0 256WORD 0x1F00 </li>
<li>1 1128WORD 0x1F80</li>
</ul>
<p><span style="color:#996633">芯片锁死的主要原因是设错熔丝位，主要有两种情况</span></p>
<ol>
<li>JTAGEN和SPIEN两个熔丝位都为1，不能再进行编程，此时只能用高压并行编程或者有源晶振恢复。</li>
<li>将熔丝位选择了外部晶振或外部RC振荡，而没有接外部晶振或外部RC振荡，或者外接的振荡频率不匹配，导致芯片不能工作，这种情况，需要外挂相应晶体才能再次操作芯片，用户应尽量记起当时设错熔丝的情况，比如错误设置成了外部3-8M晶振，那么外挂一个3-8M晶振即可进行相应操作。</li>
</ol>
<p><strong>了解了熔丝位，可以读取芯片现在的熔丝位了。</strong></p>
<p>在avrdude的终端模式输入<code>d lfuse</code> or <code>d hfuse</code></p>
<p><img src="/img/linux-avr-2/fuse2.jpg" alt="熔丝读取"></p>
<p>可以看到，熔丝位并不是默认值，默认值lfuse应该是e1,因为我使用了12M的外部晶振所以更改过。写入fuses也很简单，只需要<code>whfuse 0 0x99</code>或者 <code>wlfuse 0 0xff</code>相似即可。</p>
<p><strong>Dragon+xplain:</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>sudo avrdude <span class="attribute">-P</span> usb <span class="attribute">-p</span> x128a1 <span class="attribute">-c</span> dragon_jtag <span class="attribute">-t</span>
</pre></td></tr></table></figure>

<p><span style="color:#ff6666">输入part</span></p>
<p><img src="/img/linux-avr-2/part2.jpg" alt="partxmeag"></p>
<p>可以发现xmega128a1的资源比么m16要多的很多～</p>
<p>其他都是一样的了，不过既然用了jtag不妨使用下avarice这个仿真用的软件来查看一下。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="comment">avarice</span><span class="literal">-</span><span class="comment">x</span> <span class="literal">-</span><span class="comment">g</span> <span class="literal">-</span><span class="comment">j</span> <span class="comment">usb</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">erase</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">program</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">file</span> <span class="comment">main</span><span class="string">.</span><span class="comment">hex</span> <span class="comment">:4242</span>
</pre></td></tr></table></figure>

<p>其中-x是一定要加的否则无法识别xmega这是专门为xmega提供的选项</p>
<p>输出信息</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre><span class="tag">JTAGconfig</span> <span class="tag">starting</span>.  
<span class="tag">Founda</span> <span class="tag">device</span>: <span class="tag">AVRDRAGON</span>  
<span class="tag">Serialnumber</span>: 00<span class="pseudo">:a2</span><span class="pseudo">:00</span><span class="pseudo">:00</span><span class="pseudo">:36</span><span class="pseudo">:48</span>  
<span class="tag">ReportedJTAG</span> <span class="tag">device</span> <span class="tag">ID</span>: 0<span class="tag">x974C</span>  
<span class="tag">Configuredfor</span> <span class="tag">device</span> <span class="tag">ID</span>: 0<span class="tag">x974C</span> <span class="tag">atxmega128a1</span>  
<span class="tag">JTAGconfig</span> <span class="tag">complete</span>.  
<span class="tag">Erasingprogram</span> <span class="tag">memory</span>.  
<span class="tag">JTAGICE</span>: <span class="tag">Cannot</span> <span class="tag">synchronise</span>
</pre></td></tr></table></figure>

<p>不过无法调试，查阅了一下官方的说明，xemga调试的时序没有公开所以是无法用此来调试的。所以想调试xmega的话只能用iar或者avrstudio了。</p>
<p>最后由于AT89S52的使用很多，因此想要用在linux下烧录使用avrdude可以参考我的另一篇<a href="http://galaxy2416.github.io/2014/02/05/linux-51-1/" target="_blank">《51之linux : (一) 在linux环境下搭建51开发环境》</a></p>
<hr>
<p><a href="http://download.csdn.net/detail/galaxy_blue/4339966" target="_blank">附件</a>说明：avr-gcc的例子资源在网络上还是很丰富的，这是原来放在csdn的上的附件，其中有IAR的win例子和linux下的avr-gcc例子，后者当初整理写了一部分，如果需求，可以供给参考果，完善一些的话可能会转到github上再更新吧～</p>
]]></content>
    <summary type="html"><![CDATA[<h3 id="-ubuntu-atmeg16-avr-gcc-usbasp-dragon_jtag-">此篇以Ubuntu下的atmeg16，avr-gcc + usbasp (dragon_jtag)来进行说明。</h3>
<p><strong>由于文章迁移手头没有avr一部分图片用的以前的，看颜色也能看出来，会在后期改掉的，但效果是ok的</strong></p>
<h4 id="-avrdude-">简述了下avrdude的使用和熔丝位的基本情况。</h4>
<p>]]></summary>
    
      <category term="avr系列" scheme="galaxy2416.github.io/categories/avr%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[avr系列:(一)在linux下搭建avr开发平台]]></title>
    <link href="galaxy2416.github.io/2014/02/06/linux-avr-1/"/>
    <id>galaxy2416.github.io/2014/02/06/linux-avr-1/</id>
    <published>2014-02-06T12:59:49.000Z</published>
    <updated>2014-02-06T14:44:23.000Z</updated>
    <content type="html"><![CDATA[<h3 id="-ubuntu-atmeg16-avr-gcc-usbasp-">此篇以Ubuntu下的atmeg16，avr-gcc + usbasp的开发环境搭建来进行说明。</h3>
<p><strong>由于文章迁移手头没有avr一部分图片用的以前的，看颜色也能看出来，会在后期改掉的，但效果是ok的</strong></p>
<p>系列说明：avr作为很成功的一系列芯片，在开源上受到了极大的关注，因为使其在linux环境下的开发充满乐趣和色彩。</p>
<p>环境如下：</p>
<ul>
<li>OS系统：ubuntu 12.04（原为10.04最近升级了）</li>
<li>编译器 ：avr-gcc</li>
<li>烧录软件 :avrdude</li>
<li>调试软件:avarice ，GDB和ddd （可视界面）</li>
<li>开发板：</li>
</ul>
<ol>
<li><p>xplain(xmega128a1)无法调试，只能烧录，因为官方没有公开其调试的协议。</p>
</li>
<li><p>Mega16开发板。</p>
</li>
</ol>
<p>仿真器or烧录器：dragon和usbasp（使用较多）</p>
<h2 id="-more-"><a id="more"></a></h2>
<center><strong>关于使用前的准备和说明</strong></center>

<p>  至于为什么要使用linux下开发avr，原因主要是因为比较有趣。其次便是win下的环境用起来其实并不是很方便。IAR是付费软件（但是的确好用），Avr-studio虽然是免费版，不过优缺点是太过庞大，并且是以vc为基础开发，这个也就算不上真正的免费了。至于win-avr其实蛮不错的。win下也可以搭建如下环境,对于avr有一个比较帅气的项目可以快速开发使用avr-<a href="http://www.arduino.cc/" target="_blank">Arduino</a>，不得不说这个项目简直漂亮极了，硬件和软件以及很多简单到极致的封装代码，感兴趣应该看看，在以后可能会介绍下。</p>
<p><code>软件准备工作:</code></p>
<p>软件安装建议使用ubuntu的软件中心，比较方便。需要avr-gcc，avrdude,avarice,gdb,ddd即可了。文本编辑什么都行。可以集成在codeblocks和eclipse里面。codeblocks如此做用起来感觉不错，原理都是一样的。</p>
<p>对于命令行可以如下安装。对于一些附带库和文档自行选择即可～</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre>sudo apt<span class="attribute">-get</span> install gcc<span class="attribute">-avrbinuilts</span><span class="attribute">-avr</span> avr<span class="attribute">-libc</span>
sudo apt<span class="attribute">-get</span> install avrdude
sudo apt<span class="attribute">-get</span> install avarice
sudo apt<span class="attribute">-get</span> install gdb
sudo apt<span class="attribute">-get</span> install ddd
</pre></td></tr></table></figure>

<p>建议安装文档</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>sudo apt<span class="attribute">-get</span> install avrdude<span class="attribute">-doc</span>
</pre></td></tr></table></figure>

<p><code>测试开始</code></p>
<p>开始之前需要先写一个main.c的程序</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
</pre></td><td class="code"><pre><span class="comment">// avr-gcc application builder : 2011-11-1 </span>
<span class="comment">// Target : M16</span>
<span class="comment">// Crystal: 12.000Mhz</span>

<span class="preprocessor">#include &lt;avr/io.h&gt;</span>
<span class="preprocessor">#include &lt;util/delay.h&gt;</span>
<span class="preprocessor">#define SET(a,b) a|(1&lt;&lt;b)</span>
<span class="preprocessor">#define CLR(a,b) a &~(1&lt;&lt;b)</span>
<span class="keyword">void</span> port_init(<span class="keyword">void</span>)
{
<span class="constant"> DDRA </span> = <span class="number">0xff</span>;<span class="comment">//将PA0定义为输出</span>
<span class="constant"> PORTA </span>= <span class="number">0xff</span>;
<span class="constant"> PORTB </span>= <span class="number">0x00</span>;
<span class="constant"> DDRB </span> = <span class="number">0x00</span>;
<span class="constant"> PORTC </span>= <span class="number">0x00</span>; <span class="comment">//m103 output only</span>
<span class="constant"> DDRC </span> = <span class="number">0x00</span>;
<span class="constant"> PORTD </span>= <span class="number">0x00</span>;
<span class="constant"> DDRD </span> = <span class="number">0x00</span>;
}

<span class="comment">//call this routine to initialize all peripherals</span>
<span class="keyword">void</span> init_devices(<span class="keyword">void</span>)
{
 <span class="comment">//stop errant interrupts until set up</span>
 <span class="comment">//CLI(); //disable all interrupts</span>
 port_init();
<span class="constant"> MCUCR </span>= <span class="number">0x00</span>;
<span class="constant"> GICR </span> = <span class="number">0x00</span>;
<span class="constant"> TIMSK </span>= <span class="number">0x00</span>; <span class="comment">//timer interrupt sources</span>
<span class="comment">// SEI(); //re-enable interrupts</span>
 <span class="comment">//all peripherals are now initialized</span>
}

<span class="comment">//</span>
<span class="keyword">void</span> main(<span class="keyword">void</span>)
{
 init_devices();
 <span class="comment">//insert your functional code here...</span>
<span class="constant"> PORTA </span>= CLR(PORTA,<span class="number">3</span>);
 <span class="keyword">while</span>(<span class="number">1</span>);  <span class="comment">//程序挂起		</span>
}
</pre></td></tr></table></figure>

<p>这是一个很简单让一个小灯点亮的程序。</p>
<p>由于avr使用的是makefile模板，介绍下makefile，此物是简化操作流程的一个东西。让敲好多行命令才能完成的只需简单的一句话就行了。后文会附一个makefile的模板，是winavr下模板改的可用版。具体的内容是如何实现的，可以翻阅官方makefile手册和百度，谷歌。</p>
<p>简单介绍Makefile里面的几个命令，有过经验可以忽略这里</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="comment">#dragon_jtag</span>
<span class="constant">AVRDUDE_PORT</span> = usb   # programmer connected to serial device
<span class="constant">AVRDUDE_WRITE_FLASH</span> = -Uflash:w:<span class="variable">$(TARGET)</span>.hex
<span class="constant">AVRDUDE_FLAGS</span> = -p <span class="variable">$(MCU)</span> -P<span class="variable">$(AVRDUDE_PORT)</span> -c <span class="variable">$(AVRDUDE_PROGRAMMER)</span>
<span class="constant">AVRDUDE_FLAGS</span> += <span class="variable">$(AVRDUDE_NO_VERIFY)</span>
<span class="constant">AVRDUDE_FLAGS</span> += <span class="variable">$(AVRDUDE_VERBOSE)</span>
<span class="constant">AVRDUDE_FLAGS</span> += <span class="variable">$(AVRDUDE_ERASE_COUNTER)</span>
</pre></td></tr></table></figure>

<p>上面这些都是定义变量，makefile里的</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="symbol">program:</span> <span class="variable">$(</span><span class="constant">TARGET</span>).hex <span class="variable">$(</span><span class="constant">TARGET</span>).eep
     <span class="variable">$(</span><span class="constant">AVRDUDE</span>)<span class="variable">$(</span><span class="constant">AVRDUDE_FLAGS</span>) <span class="variable">$(</span><span class="constant">AVRDUDE_WRITE_FLASH</span>) <span class="variable">$(</span><span class="constant">AVRDUDE_WRITE_EEPROM</span>)
</pre></td></tr></table></figure>

<p>当我们输入make program时就会执行上面这句之前的都不用关心了。翻译过来就变成了(如果叫main.hex)</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>avrdude <span class="attribute">-P</span> usb <span class="attribute">-p</span> m16 <span class="attribute">-c</span> usbasp <span class="attribute">-U</span> flash:w:main<span class="built_in">.</span>hex
</pre></td></tr></table></figure>

<p>就是说用usb下的usbasp烧录m16的flash，内容为main.hex</p>
<p>如果用dragon的话一般用jtag就是-c dragon_jtag。具体可以查看avrdude手册。</p>
<p>了解之后先打开终端，找到.c文件目录下。Makefile文件放在同一目录下</p>
<p>根据需要更改其内容</p>
<p><code>编译</code></p>
<p>输入make</p>
<p>便会输出一些信息</p>
<p><img src="/img/linux-avr-1/make.png" alt="make"></p>
<p>编译成功之后就可以烧录了</p>
<p>烧录之前看一下烧录器是否在</p>
<p>输入lsusb</p>
<p><img src="/img/linux-avr-1/lsusb.png" alt="lsusb"></p>
<p>可以看到烧录器件存在。</p>
<p><code>烧录</code></p>
<p>输入<code>sudo make program</code></p>
<p><img src="/img/linux-avr-1/makepro.jpg" alt="makepro"></p>
<p>会在很快的时间内烧录成功。最后提示你烧录成功</p>
<p><img src="/img/linux-avr-1/prook.jpg" alt="prook"></p>
<p><code>调试</code></p>
<p>至于debug，usbasp没有这个功能。需要用dragon的jtag。</p>
<p>注：Debug其实不是很推荐使用，虽然比较高效，建议利用串口的信息输入输出（以后会介绍），这是因为在进入系统的嵌入后，常规的debug经常会无法使用。</p>
<p>实际使用要用avarice</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="comment">avarice</span> <span class="literal">-</span><span class="comment">g</span> <span class="literal">-</span><span class="comment">j</span> <span class="comment">usb</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">erase</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">program</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">filemain</span><span class="string">.</span><span class="comment">hex</span> <span class="comment">:4242</span>
</pre></td></tr></table></figure>

<p>不过如果makefile里已经写好的话直接输入`sudo make debug``就可以了</p>
<p>下面为命令的结果</p>
<p><img src="/img/linux-avr-1/avarice.jpg" alt="avarice"></p>
<p><em>由于我的dragon被物主回收了，所以只能用老图了</em></p>
<p>现在属于等待GDB，可视化的话就是DDD的状态中了</p>
<p>比如在gdb.conf中添加</p>
<p>file main.elf</p>
<p>target remotelocalhost:4242</p>
<p>启动DDD</p>
<p><code>ddd–-debugger “avr-gdb -x gdb.conf”</code></p>
<p><img src="/img/linux-avr-1/ddd.jpg" alt="ddd"></p>
<p>也可以手起动，然后配置，ui界面比较友好。</p>
<p>还有一句话。makefile里面已经把上步骤都做好了～当然会根据需求要求更改的。尤其是debug的时候。</p>
<p>总结：本文所说有些简略了，linux开发的困难主要在于搭建环境，因此需要多看一下相关的官方手册。</p>
<hr>
<p><strong>附录：</strong></p>
<p>模板Makefile(内容请自行修改)</p>
<p>make : 编译</p>
<p>make program : 烧录</p>
<p>make debug : 调试</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
278
279
280
281
282
283
284
285
286
287
288
289
290
291
292
293
294
295
296
297
298
299
300
301
302
303
304
305
306
307
308
309
310
311
312
313
314
315
316
317
318
319
320
321
322
323
324
325
326
327
328
329
330
331
332
333
334
335
336
337
338
339
340
341
342
343
344
345
346
347
348
349
350
351
352
353
354
355
356
357
358
359
360
361
362
363
364
365
366
367
368
369
370
371
372
373
374
375
376
377
378
379
380
381
382
383
384
385
386
387
388
389
390
391
392
393
394
395
396
397
398
399
400
401
402
403
404
405
406
407
408
409
410
411
412
413
414
415
416
417
418
419
420
421
422
423
424
425
426
427
428
429
430
431
432
433
434
435
436
437
438
439
440
441
442
443
444
445
446
447
448
449
450
451
452
453
454
455
456
457
458
459
460
461
462
463
464
465
466
467
468
469
470
471
472
473
474
475
476
477
478
479
480
481
482
483
484
485
486
487
488
489
490
491
492
493
494
495
496
497
498
499
500
501
502
503
504
505
506
507
508
509
510
511
512
513
514
515
516
517
518
519
520
521
522
523
524
525
526
527
528
529
530
531
532
533
534
535
536
537
538
539
540
541
542
543
544
545
546
547
548
549
550
551
552
553
554
555
556
557
558
559
560
561
562
563
564
565
566
567
568
569
570
571
572
573
574
575
576
577
578
579
580
581
582
583
584
585
586
587
588
589
590
591
592
593
594
595
596
597
598
599
600
601
602
603
604
605
606
607
608
609
610
611
612
613
614
615
616
617
618
619
620
621
622
623
624
</pre></td><td class="code"><pre><span class="comment"># Hey Vim, this is a -*- makefile -*-  </span>
<span class="comment">#----------------------------------------------------------------------------  </span>
<span class="comment"># WinAVR Makefile Template written by Eric B. Weddington, Jörg Wunsch, et al.  </span>
<span class="comment"># Linux GCC using is changed by Galaxy2416  </span>
<span class="comment"># Released to the Public Domain  </span>
<span class="comment">#  </span>
<span class="comment"># Additional material for this makefile was written by:  </span>
<span class="comment"># Peter Fleury  </span>
<span class="comment"># Tim Henigan  </span>
<span class="comment"># Colin O'Flynn  </span>
<span class="comment"># Reiner Patommel  </span>
<span class="comment"># Markus Pfaff  </span>
<span class="comment"># Sander Pool  </span>
<span class="comment"># Frederik Rouleau  </span>
<span class="comment"># Carlos Lamas  </span>
<span class="comment">#  </span>
<span class="comment">#----------------------------------------------------------------------------  </span>
<span class="comment"># On command line:  </span>
<span class="comment">#  </span>
<span class="comment"># make all = Make software.  </span>
<span class="comment">#  </span>
<span class="comment"># make clean = Clean out built project files.  </span>
<span class="comment">#  </span>
<span class="comment"># make coff = Convert ELF to AVR COFF.  </span>
<span class="comment">#  </span>
<span class="comment"># make extcoff = Convert ELF to AVR Extended COFF.  </span>
<span class="comment">#  </span>
<span class="comment"># make program = Download the hex file to the device, using avrdude.  </span>
<span class="comment">#                Please customize the avrdude settings below first!  </span>
<span class="comment">#  </span>
<span class="comment"># make debug = Start either simulavr or avarice as specified for debugging,   </span>
<span class="comment">#              with avr-gdb or avr-insight as the front end for debugging.  </span>
<span class="comment">#  </span>
<span class="comment"># make filename.s = Just compile filename.c into the assembler code only.  </span>
<span class="comment">#  </span>
<span class="comment"># make filename.i = Create a preprocessed source file for use in submitting  </span>
<span class="comment">#                   bug reports to the GCC project.  </span>
<span class="comment">#  </span>
<span class="comment"># To rebuild project do "make clean" then "make all".  </span>
<span class="comment">#----------------------------------------------------------------------------  </span>
  
  
<span class="comment"># MCU name  </span>
<span class="constant">MCU</span> = atmega16  
<span class="comment">#atxmega128a1  </span>
  
  
<span class="comment"># Processor frequency.  </span>
<span class="comment">#     This will define a symbol, F_CPU, in all source code files equal to the   </span>
<span class="comment">#     processor frequency. You can then use this symbol in your source code to   </span>
<span class="comment">#     calculate timings. Do NOT tack on a 'UL' at the end, this will be done  </span>
<span class="comment">#     automatically to create a 32-bit value in your source code.  </span>
<span class="comment">#     Typical values are:  </span>
<span class="comment">#         F_CPU =  1000000  </span>
<span class="comment">#         F_CPU =  1843200  </span>
<span class="comment">#         F_CPU =  2000000  </span>
<span class="comment">#         F_CPU =  3686400  </span>
<span class="comment">#         F_CPU =  4000000  </span>
<span class="comment">#         F_CPU =  7372800  </span>
<span class="comment">#         F_CPU =  8000000  </span>
<span class="comment">#         F_CPU = 11059200  </span>
<span class="comment">#         F_CPU = 14745600  </span>
<span class="comment">#         F_CPU = 16000000  </span>
<span class="comment">#         F_CPU = 18432000  </span>
<span class="comment">#         F_CPU = 20000000  </span>
<span class="constant">F_CPU</span> = <span class="number">8000000</span>  
  
  
<span class="comment"># Output format. (can be srec, ihex, binary)  </span>
<span class="constant">FORMAT</span> = ihex  
  
  
<span class="comment"># Target file name (without extension).  </span>
<span class="constant">TARGET</span> = main  
  
  
<span class="comment"># Object files directory  </span>
<span class="comment">#     To put object files in current directory, use a dot (.), do NOT make  </span>
<span class="comment">#     this an empty or blank macro!  </span>
<span class="constant">OBJDIR</span> = .  
  
  
<span class="comment"># List C source files here. (C dependencies are automatically generated.)  </span>
<span class="constant">SRC</span> = <span class="variable">$(</span><span class="constant">TARGET</span>).c   
  
<span class="comment"># List C++ source files here. (C dependencies are automatically generated.)  </span>
<span class="constant">CPPSRC</span> =   
  
  
<span class="comment"># List Assembler source files here.  </span>
<span class="comment">#     Make them always end in a capital .S.  Files ending in a lowercase .s  </span>
<span class="comment">#     will not be considered source files but generated files (assembler  </span>
<span class="comment">#     output from the compiler), and will be deleted upon "make clean"!  </span>
<span class="comment">#     Even though the DOS/Win* filesystem matches both .s and .S the same,  </span>
<span class="comment">#     it will preserve the spelling of the filenames, and gcc itself does  </span>
<span class="comment">#     care about how the name is spelled on its command-line.  </span>
<span class="constant">ASRC</span> =  
  
  
<span class="comment"># Optimization level, can be [0, 1, 2, 3, s].   </span>
<span class="comment">#     0 = turn off optimization. s = optimize for size.  </span>
<span class="comment">#     (Note: 3 is not always the best optimization level. See avr-libc FAQ.)  </span>
<span class="constant">OPT</span> = s  
  
  
<span class="comment"># Debugging format.  </span>
<span class="comment">#     Native formats for AVR-GCC's -g are dwarf-2 [default] or stabs.  </span>
<span class="comment">#     AVR Studio 4.10 requires dwarf-2.  </span>
<span class="comment">#     AVR [Extended] COFF format requires stabs, plus an avr-objcopy run.  </span>
<span class="constant">DEBUG</span> = dwarf-<span class="number">2</span>  
  
  
<span class="comment"># List any extra directories to look for include files here.  </span>
<span class="comment">#     Each directory must be seperated by a space.  </span>
<span class="comment">#     Use forward slashes for directory separators.  </span>
<span class="comment">#     For a directory that has spaces, enclose it in quotes.  </span>
<span class="constant">EXTRAINCDIRS</span> =   
  
  
<span class="comment"># Compiler flag to set the C Standard level.  </span>
<span class="comment">#     c89   = "ANSI" C  </span>
<span class="comment">#     gnu89 = c89 plus GCC extensions  </span>
<span class="comment">#     c99   = ISO C99 standard (not yet fully implemented)  </span>
<span class="comment">#     gnu99 = c99 plus GCC extensions  </span>
<span class="constant">CSTANDARD</span> = -std=gnu99  
  
  
<span class="comment"># Place -D or -U options here for C sources  </span>
<span class="constant">CDEFS</span> = -<span class="constant">DF_CPU</span>=<span class="variable">$(</span><span class="constant">F_CPU</span>)<span class="constant">UL</span>  
  
  
<span class="comment"># Place -D or -U options here for ASM sources  </span>
<span class="constant">ADEFS</span> = -<span class="constant">DF_CPU</span>=<span class="variable">$(</span><span class="constant">F_CPU</span>)  
  
  
<span class="comment"># Place -D or -U options here for C++ sources  </span>
<span class="constant">CPPDEFS</span> = -<span class="constant">DF_CPU</span>=<span class="variable">$(</span><span class="constant">F_CPU</span>)<span class="constant">UL</span>  
<span class="comment">#CPPDEFS += -D__STDC_LIMIT_MACROS  </span>
<span class="comment">#CPPDEFS += -D__STDC_CONSTANT_MACROS  </span>
  
  
  
<span class="comment">#---------------- Compiler Options C ----------------  </span>
<span class="comment">#  -g*:          generate debugging information  </span>
<span class="comment">#  -O*:          optimization level  </span>
<span class="comment">#  -f...:        tuning, see GCC manual and avr-libc documentation  </span>
<span class="comment">#  -Wall...:     warning level  </span>
<span class="comment">#  -Wa,...:      tell GCC to pass this to the assembler.  </span>
<span class="comment">#    -adhlns...: create assembler listing  </span>
<span class="constant">CFLAGS</span> = -g<span class="variable">$(</span><span class="constant">DEBUG</span>)  
<span class="constant">CFLAGS</span> += <span class="variable">$(</span><span class="constant">CDEFS</span>)  
<span class="constant">CFLAGS</span> += -<span class="constant">O</span><span class="variable">$(</span><span class="constant">OPT</span>)  
<span class="constant">CFLAGS</span> += -funsigned-char  
<span class="constant">CFLAGS</span> += -funsigned-bitfields  
<span class="constant">CFLAGS</span> += -fpack-struct  
<span class="constant">CFLAGS</span> += -fshort-enums  
<span class="constant">CFLAGS</span> += -<span class="constant">Wall</span>  
<span class="constant">CFLAGS</span> += -<span class="constant">Wstrict</span>-prototypes  
<span class="comment">#CFLAGS += -mshort-calls  </span>
<span class="comment">#CFLAGS += -fno-unit-at-a-time  </span>
<span class="comment">#CFLAGS += -Wundef  </span>
<span class="comment">#CFLAGS += -Wunreachable-code  </span>
<span class="comment">#CFLAGS += -Wsign-compare  </span>
<span class="constant">CFLAGS</span> += -<span class="constant">Wa</span>,-adhlns=<span class="variable">$(</span>&lt;<span class="symbol">:%</span>.c=<span class="variable">$(</span><span class="constant">OBJDIR</span>)/%.lst)  
<span class="constant">CFLAGS</span> += <span class="variable">$(</span>patsubst %,-<span class="constant">I</span>%,<span class="variable">$(</span><span class="constant">EXTRAINCDIRS</span>))  
<span class="constant">CFLAGS</span> += <span class="variable">$(</span><span class="constant">CSTANDARD</span>)  
  
  
<span class="comment">#---------------- Compiler Options C++ ----------------  </span>
<span class="comment">#  -g*:          generate debugging information  </span>
<span class="comment">#  -O*:          optimization level  </span>
<span class="comment">#  -f...:        tuning, see GCC manual and avr-libc documentation  </span>
<span class="comment">#  -Wall...:     warning level  </span>
<span class="comment">#  -Wa,...:      tell GCC to pass this to the assembler.  </span>
<span class="comment">#    -adhlns...: create assembler listing  </span>
<span class="constant">CPPFLAGS</span> = -g<span class="variable">$(</span><span class="constant">DEBUG</span>)  
<span class="constant">CPPFLAGS</span> += <span class="variable">$(</span><span class="constant">CPPDEFS</span>)  
<span class="constant">CPPFLAGS</span> += -<span class="constant">O</span><span class="variable">$(</span><span class="constant">OPT</span>)  
<span class="constant">CPPFLAGS</span> += -funsigned-char  
<span class="constant">CPPFLAGS</span> += -funsigned-bitfields  
<span class="constant">CPPFLAGS</span> += -fpack-struct  
<span class="constant">CPPFLAGS</span> += -fshort-enums  
<span class="constant">CPPFLAGS</span> += -fno-exceptions  
<span class="constant">CPPFLAGS</span> += -<span class="constant">Wall</span>  
<span class="constant">CPPFLAGS</span> += -<span class="constant">Wundef</span>  
<span class="comment">#CPPFLAGS += -mshort-calls  </span>
<span class="comment">#CPPFLAGS += -fno-unit-at-a-time  </span>
<span class="comment">#CPPFLAGS += -Wstrict-prototypes  </span>
<span class="comment">#CPPFLAGS += -Wunreachable-code  </span>
<span class="comment">#CPPFLAGS += -Wsign-compare  </span>
<span class="constant">CPPFLAGS</span> += -<span class="constant">Wa</span>,-adhlns=<span class="variable">$(</span>&lt;<span class="symbol">:%</span>.cpp=<span class="variable">$(</span><span class="constant">OBJDIR</span>)/%.lst)  
<span class="constant">CPPFLAGS</span> += <span class="variable">$(</span>patsubst %,-<span class="constant">I</span>%,<span class="variable">$(</span><span class="constant">EXTRAINCDIRS</span>))  
<span class="comment">#CPPFLAGS += $(CSTANDARD)  </span>
  
  
<span class="comment">#---------------- Assembler Options ----------------  </span>
<span class="comment">#  -Wa,...:   tell GCC to pass this to the assembler.  </span>
<span class="comment">#  -adhlns:   create listing  </span>
<span class="comment">#  -gstabs:   have the assembler create line number information; note that  </span>
<span class="comment">#             for use in COFF files, additional information about filenames  </span>
<span class="comment">#             and function names needs to be present in the assembler source  </span>
<span class="comment">#             files -- see avr-libc docs [FIXME: not yet described there]  </span>
<span class="comment">#  -listing-cont-lines: Sets the maximum number of continuation lines of hex   </span>
<span class="comment">#       dump that will be displayed for a given single line of source input.  </span>
<span class="constant">ASFLAGS</span> = <span class="variable">$(</span><span class="constant">ADEFS</span>) -<span class="constant">Wa</span>,-adhlns=<span class="variable">$(</span>&lt;<span class="symbol">:%</span>.<span class="constant">S</span>=<span class="variable">$(</span><span class="constant">OBJDIR</span>)/%.lst),-gstabs,--listing-cont-lines=<span class="number">100</span>  
  
  
<span class="comment">#---------------- Library Options ----------------  </span>
<span class="comment"># Minimalistic printf version  </span>
<span class="constant">PRINTF_LIB_MIN</span> = -<span class="constant">Wl</span>,-u,vfprintf -lprintf_min  
  
<span class="comment"># Floating point printf version (requires MATH_LIB = -lm below)  </span>
<span class="constant">PRINTF_LIB_FLOAT</span> = -<span class="constant">Wl</span>,-u,vfprintf -lprintf_flt  
  
<span class="comment"># If this is left blank, then it will use the Standard printf version.  </span>
<span class="constant">PRINTF_LIB</span> =   
<span class="comment">#PRINTF_LIB = $(PRINTF_LIB_MIN)  </span>
<span class="comment">#PRINTF_LIB = $(PRINTF_LIB_FLOAT)  </span>
  
  
<span class="comment"># Minimalistic scanf version  </span>
<span class="constant">SCANF_LIB_MIN</span> = -<span class="constant">Wl</span>,-u,vfscanf -lscanf_min  
  
<span class="comment"># Floating point + %[ scanf version (requires MATH_LIB = -lm below)  </span>
<span class="constant">SCANF_LIB_FLOAT</span> = -<span class="constant">Wl</span>,-u,vfscanf -lscanf_flt  
  
<span class="comment"># If this is left blank, then it will use the Standard scanf version.  </span>
<span class="constant">SCANF_LIB</span> =   
<span class="comment">#SCANF_LIB = $(SCANF_LIB_MIN)  </span>
<span class="comment">#SCANF_LIB = $(SCANF_LIB_FLOAT)  </span>
  
  
<span class="constant">MATH_LIB</span> = -lm  
  
  
<span class="comment"># List any extra directories to look for libraries here.  </span>
<span class="comment">#     Each directory must be seperated by a space.  </span>
<span class="comment">#     Use forward slashes for directory separators.  </span>
<span class="comment">#     For a directory that has spaces, enclose it in quotes.  </span>
<span class="constant">EXTRALIBDIRS</span> =   
  
  
  
<span class="comment">#---------------- External Memory Options ----------------  </span>
  
<span class="comment"># 64 KB of external RAM, starting after internal RAM (ATmega128!),  </span>
<span class="comment"># used for variables (.data/.bss) and heap (malloc()).  </span>
<span class="comment">#EXTMEMOPTS = -Wl,-Tdata=0x801100,--defsym=__heap_end=0x80ffff  </span>
  
<span class="comment"># 64 KB of external RAM, starting after internal RAM (ATmega128!),  </span>
<span class="comment"># only used for heap (malloc()).  </span>
<span class="comment">#EXTMEMOPTS = -Wl,--section-start,.data=0x801100,--defsym=__heap_end=0x80ffff  </span>
  
<span class="constant">EXTMEMOPTS</span> =  
  
  
  
  
<span class="comment">#---------------- Linker Options ----------------  </span>
<span class="comment">#  -Wl,...:     tell GCC to pass this to linker.  </span>
<span class="comment">#    -Map:      create map file  </span>
<span class="comment">#    --cref:    add cross reference to  map file  </span>
<span class="constant">LDFLAGS</span> = -<span class="constant">Wl</span>,-<span class="constant">Map</span>=<span class="variable">$(</span><span class="constant">TARGET</span>).map,--cref  
<span class="constant">LDFLAGS</span> += <span class="variable">$(</span><span class="constant">EXTMEMOPTS</span>)  
<span class="constant">LDFLAGS</span> += <span class="variable">$(</span>patsubst %,-<span class="constant">L</span>%,<span class="variable">$(</span><span class="constant">EXTRALIBDIRS</span>))  
<span class="constant">LDFLAGS</span> += <span class="variable">$(</span><span class="constant">PRINTF_LIB</span>) <span class="variable">$(</span><span class="constant">SCANF_LIB</span>) <span class="variable">$(</span><span class="constant">MATH_LIB</span>)  
<span class="comment">#LDFLAGS += -T linker_script.x  </span>
  
  
  
<span class="comment">#---------------- Programming Options (avrdude) ----------------  </span>
  
<span class="comment"># Programming hardware  </span>
<span class="comment"># Type: avrdude -c ?  </span>
<span class="comment"># to get a full listing.  </span>
<span class="comment">#  </span>
<span class="constant">AVRDUDE_PROGRAMMER</span> = usbasp  
<span class="comment">#dragon_jtag  </span>
  
<span class="comment"># com1 = serial port. Use lpt1 to connect to parallel port.  </span>
<span class="constant">AVRDUDE_PORT</span> = usb   <span class="comment"># programmer connected to serial device  </span>
  
<span class="constant">AVRDUDE_WRITE_FLASH</span> = -<span class="constant">U</span> <span class="symbol">flash:</span><span class="symbol">w:</span><span class="variable">$(</span><span class="constant">TARGET</span>).hex  
<span class="comment">#AVRDUDE_WRITE_EEPROM = -U eeprom:w:$(TARGET).eep  </span>
  
  
<span class="comment"># Uncomment the following if you want avrdude's erase cycle counter.  </span>
<span class="comment"># Note that this counter needs to be initialized first using -Yn,  </span>
<span class="comment"># see avrdude manual.  </span>
<span class="comment">#AVRDUDE_ERASE_COUNTER = -y  </span>
  
<span class="comment"># Uncomment the following if you do /not/ wish a verification to be  </span>
<span class="comment"># performed after programming the device.  </span>
<span class="comment">#AVRDUDE_NO_VERIFY = -V  </span>
  
<span class="comment"># Increase verbosity level.  Please use this when submitting bug  </span>
<span class="comment"># reports about avrdude. See &lt;http://savannah.nongnu.org/projects/avrdude&gt;   </span>
<span class="comment"># to submit bug reports.  </span>
<span class="comment">#AVRDUDE_VERBOSE = -v -v  </span>
  
<span class="constant">AVRDUDE_FLAGS</span> = -p <span class="variable">$(</span><span class="constant">MCU</span>) -<span class="constant">P</span> <span class="variable">$(</span><span class="constant">AVRDUDE_PORT</span>) -c <span class="variable">$(</span><span class="constant">AVRDUDE_PROGRAMMER</span>)  
<span class="comment">#AVRDUDE_FLAGS = -p m16 -P $(AVRDUDE_PORT) -c $(AVRDUDE_PROGRAMMER)  </span>
<span class="constant">AVRDUDE_FLAGS</span> += <span class="variable">$(</span><span class="constant">AVRDUDE_NO_VERIFY</span>)  
<span class="constant">AVRDUDE_FLAGS</span> += <span class="variable">$(</span><span class="constant">AVRDUDE_VERBOSE</span>)  
<span class="constant">AVRDUDE_FLAGS</span> += <span class="variable">$(</span><span class="constant">AVRDUDE_ERASE_COUNTER</span>)  
  
  
  
<span class="comment">#---------------- Debugging Options ----------------  </span>
  
<span class="comment"># For simulavr only - target MCU frequency.  </span>
<span class="constant">DEBUG_MFREQ</span> = <span class="variable">$(</span><span class="constant">F_CPU</span>)  
  
<span class="comment"># Set the DEBUG_UI to either gdb or insight.  </span>
<span class="comment"># DEBUG_UI = gdb  </span>
<span class="constant">DEBUG_UI</span> = gdb  
  
<span class="comment"># Set the debugging back-end to either avarice, simulavr.  </span>
<span class="constant">DEBUG_BACKEND</span> = avarice  
<span class="comment">#DEBUG_BACKEND = simulavr  </span>
  
<span class="comment"># GDB Init Filename.  </span>
<span class="constant">GDBINIT_FILE</span> = __avr_gdbinit  
  
<span class="comment"># When using avarice settings for the JTAG  </span>
<span class="constant">JTAG_DEV</span> = usb  
  
<span class="comment"># Debugging port used to communicate between GDB / avarice / simulavr.  </span>
<span class="constant">DEBUG_PORT</span> = <span class="number">4242</span>  
  
<span class="comment"># Debugging host used to communicate between GDB / avarice / simulavr, normally  </span>
<span class="comment">#     just set to localhost unless doing some sort of crazy debugging when   </span>
<span class="comment">#     avarice is running on a different computer.  </span>
<span class="constant">DEBUG_HOST</span> = localhost  
  
  
  
<span class="comment">#============================================================================  </span>
  
  
<span class="comment"># Define programs and commands.  </span>
<span class="constant">SHELL</span> = sh  
<span class="constant">CC</span> = avr-gcc  
<span class="constant">OBJCOPY</span> = avr-objcopy  
<span class="constant">OBJDUMP</span> = avr-objdump  
<span class="constant">SIZE</span> = avr-size  
<span class="constant">AR</span> = avr-ar rcs  
<span class="constant">NM</span> = avr-nm  
<span class="constant">AVRDUDE</span> = avrdude  
<span class="constant">REMOVE</span> = rm -f  
<span class="constant">REMOVEDIR</span> = rm -rf  
<span class="constant">COPY</span> = cp  
<span class="constant">WINSHELL</span> =   
  
<span class="comment"># Define Messages  </span>
<span class="comment"># English  </span>
<span class="constant">MSG_ERRORS_NONE</span> = <span class="constant">Errors</span><span class="symbol">:</span> none  
<span class="constant">MSG_BEGIN</span> = -------- <span class="keyword">begin</span> --------  
<span class="constant">MSG_END</span> = --------  <span class="keyword">end</span>  --------  
<span class="constant">MSG_SIZE_BEFORE</span> = <span class="constant">Size</span> <span class="symbol">before:</span>   
<span class="constant">MSG_SIZE_AFTER</span> = <span class="constant">Size</span> <span class="symbol">after:</span>  
<span class="constant">MSG_COFF</span> = <span class="constant">Converting</span> to <span class="constant">AVR</span> <span class="constant">COFF</span><span class="symbol">:</span>  
<span class="constant">MSG_EXTENDED_COFF</span> = <span class="constant">Converting</span> to <span class="constant">AVR</span> <span class="constant">Extended</span> <span class="constant">COFF</span><span class="symbol">:</span>  
<span class="constant">MSG_FLASH</span> = <span class="constant">Creating</span> load file <span class="keyword">for</span> <span class="constant">Flash</span><span class="symbol">:</span>  
<span class="constant">MSG_EEPROM</span> = <span class="constant">Creating</span> load file <span class="keyword">for</span> <span class="constant">EEPROM</span><span class="symbol">:</span>  
<span class="constant">MSG_EXTENDED_LISTING</span> = <span class="constant">Creating</span> <span class="constant">Extended</span> <span class="constant">Listing</span><span class="symbol">:</span>  
<span class="constant">MSG_SYMBOL_TABLE</span> = <span class="constant">Creating</span> <span class="constant">Symbol</span> <span class="constant">Table</span><span class="symbol">:</span>  
<span class="constant">MSG_LINKING</span> = <span class="constant">Linking</span><span class="symbol">:</span>  
<span class="constant">MSG_COMPILING</span> = <span class="constant">Compiling</span> <span class="constant">C</span><span class="symbol">:</span>  
<span class="constant">MSG_COMPILING_CPP</span> = <span class="constant">Compiling</span> <span class="constant">C</span>++<span class="symbol">:</span>  
<span class="constant">MSG_ASSEMBLING</span> = <span class="constant">Assembling</span><span class="symbol">:</span>  
<span class="constant">MSG_CLEANING</span> = <span class="constant">Cleaning</span> <span class="symbol">project:</span>  
<span class="constant">MSG_CREATING_LIBRARY</span> = <span class="constant">Creating</span> <span class="symbol">library:</span>  
  
  
  
  
<span class="comment"># Define all object files.  </span>
<span class="constant">OBJ</span> = <span class="variable">$(</span><span class="constant">SRC</span><span class="symbol">:%</span>.c=<span class="variable">$(</span><span class="constant">OBJDIR</span>)/%.o) <span class="variable">$(</span><span class="constant">CPPSRC</span><span class="symbol">:%</span>.cpp=<span class="variable">$(</span><span class="constant">OBJDIR</span>)/%.o) <span class="variable">$(</span><span class="constant">ASRC</span><span class="symbol">:%</span>.<span class="constant">S</span>=<span class="variable">$(</span><span class="constant">OBJDIR</span>)/%.o)   
  
<span class="comment"># Define all listing files.  </span>
<span class="constant">LST</span> = <span class="variable">$(</span><span class="constant">SRC</span><span class="symbol">:%</span>.c=<span class="variable">$(</span><span class="constant">OBJDIR</span>)/%.lst) <span class="variable">$(</span><span class="constant">CPPSRC</span><span class="symbol">:%</span>.cpp=<span class="variable">$(</span><span class="constant">OBJDIR</span>)/%.lst) <span class="variable">$(</span><span class="constant">ASRC</span><span class="symbol">:%</span>.<span class="constant">S</span>=<span class="variable">$(</span><span class="constant">OBJDIR</span>)/%.lst)   
  
  
<span class="comment"># Compiler flags to generate dependency files.  </span>
<span class="constant">GENDEPFLAGS</span> = -<span class="constant">MMD</span> -<span class="constant">MP</span> -<span class="constant">MF</span> .dep/<span class="variable">$(</span><span class="variable">@F</span>).d  
  
  
<span class="comment"># Combine all necessary flags and optional flags.  </span>
<span class="comment"># Add target processor to flags.  </span>
<span class="constant">ALL_CFLAGS</span> = -mmcu=<span class="variable">$(</span><span class="constant">MCU</span>) -<span class="constant">I</span>. <span class="variable">$(</span><span class="constant">CFLAGS</span>) <span class="variable">$(</span><span class="constant">GENDEPFLAGS</span>)  
<span class="constant">ALL_CPPFLAGS</span> = -mmcu=<span class="variable">$(</span><span class="constant">MCU</span>) -<span class="constant">I</span>. -x c++ <span class="variable">$(</span><span class="constant">CPPFLAGS</span>) <span class="variable">$(</span><span class="constant">GENDEPFLAGS</span>)  
<span class="constant">ALL_ASFLAGS</span> = -mmcu=<span class="variable">$(</span><span class="constant">MCU</span>) -<span class="constant">I</span>. -x assembler-with-cpp <span class="variable">$(</span><span class="constant">ASFLAGS</span>)  
  
  
  
  
  
<span class="comment"># Default target.  </span>
<span class="symbol">all:</span> <span class="keyword">begin</span> gccversion sizebefore build sizeafter <span class="keyword">end</span>  
  
<span class="comment"># Change the build target to build a HEX file or a library.  </span>
<span class="symbol">build:</span> elf hex eep lss sym  
<span class="comment">#build: lib  </span>
  
  
<span class="symbol">elf:</span> <span class="variable">$(</span><span class="constant">TARGET</span>).elf  
<span class="symbol">hex:</span> <span class="variable">$(</span><span class="constant">TARGET</span>).hex  
<span class="symbol">eep:</span> <span class="variable">$(</span><span class="constant">TARGET</span>).eep  
<span class="symbol">lss:</span> <span class="variable">$(</span><span class="constant">TARGET</span>).lss  
<span class="symbol">sym:</span> <span class="variable">$(</span><span class="constant">TARGET</span>).sym  
<span class="constant">LIBNAME</span>=lib<span class="variable">$(</span><span class="constant">TARGET</span>).a  
<span class="symbol">lib:</span> <span class="variable">$(</span><span class="constant">LIBNAME</span>)  
  
  
  
<span class="comment"># Eye candy.  </span>
<span class="comment"># AVR Studio 3.x does not check make's exit code but relies on  </span>
<span class="comment"># the following magic strings to be generated by the compile job.  </span>
<span class="symbol">begin:</span>  
    <span class="variable">@echo</span>  
    <span class="variable">@echo</span> <span class="variable">$(</span><span class="constant">MSG_BEGIN</span>)  
  
<span class="symbol">end:</span>  
    <span class="variable">@echo</span> <span class="variable">$(</span><span class="constant">MSG_END</span>)  
    <span class="variable">@echo</span>  
  
  
<span class="comment"># Display size of file.  </span>
<span class="constant">HEXSIZE</span> = <span class="variable">$(</span><span class="constant">SIZE</span>) --target=<span class="variable">$(</span><span class="constant">FORMAT</span>) <span class="variable">$(</span><span class="constant">TARGET</span>).hex  
<span class="constant">ELFSIZE</span> = <span class="variable">$(</span><span class="constant">SIZE</span>) --mcu=<span class="variable">$(</span><span class="constant">MCU</span>) --format=avr <span class="variable">$(</span><span class="constant">TARGET</span>).elf  
  
<span class="symbol">sizebefore:</span>  
    <span class="variable">@if</span> test -f <span class="variable">$(</span><span class="constant">TARGET</span>).elf; <span class="keyword">then</span> echo; echo <span class="variable">$(</span><span class="constant">MSG_SIZE_BEFORE</span>); <span class="variable">$(</span><span class="constant">ELFSIZE</span>); \  
    <span class="number">2</span>&gt;<span class="regexp">/dev/null</span>; echo; fi  
  
<span class="symbol">sizeafter:</span>  
    <span class="variable">@if</span> test -f <span class="variable">$(</span><span class="constant">TARGET</span>).elf; <span class="keyword">then</span> echo; echo <span class="variable">$(</span><span class="constant">MSG_SIZE_AFTER</span>); <span class="variable">$(</span><span class="constant">ELFSIZE</span>); \  
    <span class="number">2</span>&gt;<span class="regexp">/dev/null</span>; echo; fi  
  
  
  
<span class="comment"># Display compiler version information.  </span>
gccversion <span class="symbol">:</span>   
    @<span class="variable">$(</span><span class="constant">CC</span>) --version  
  
  
  
<span class="comment"># Program the device.    </span>
<span class="symbol">program:</span> <span class="variable">$(</span><span class="constant">TARGET</span>).hex <span class="variable">$(</span><span class="constant">TARGET</span>).eep  
    <span class="variable">$(</span><span class="constant">AVRDUDE</span>) <span class="variable">$(</span><span class="constant">AVRDUDE_FLAGS</span>) <span class="variable">$(</span><span class="constant">AVRDUDE_WRITE_FLASH</span>) <span class="variable">$(</span><span class="constant">AVRDUDE_WRITE_EEPROM</span>)  
  
  
<span class="comment"># Generate avr-gdb config/init file which does the following:  </span>
<span class="comment">#     define the reset signal, load the target file, connect to target, and set   </span>
<span class="comment">#     a breakpoint at main().  </span>
gdb-<span class="symbol">config:</span>   
    @<span class="variable">$(</span><span class="constant">REMOVE</span>) <span class="variable">$(</span><span class="constant">GDBINIT_FILE</span>)  
    <span class="variable">@echo</span> define reset &gt;&gt; <span class="variable">$(</span><span class="constant">GDBINIT_FILE</span>)  
    <span class="variable">@echo</span> <span class="constant">SIGNAL</span> <span class="constant">SIGHUP</span> &gt;&gt; <span class="variable">$(</span><span class="constant">GDBINIT_FILE</span>)  
    <span class="variable">@echo</span> <span class="keyword">end</span> &gt;&gt; <span class="variable">$(</span><span class="constant">GDBINIT_FILE</span>)  
    <span class="variable">@echo</span> file <span class="variable">$(</span><span class="constant">TARGET</span>).elf &gt;&gt; <span class="variable">$(</span><span class="constant">GDBINIT_FILE</span>)  
    <span class="variable">@echo</span> target remote <span class="variable">$(</span><span class="constant">DEBUG_HOST</span>)<span class="symbol">:</span><span class="variable">$(</span><span class="constant">DEBUG_PORT</span>)  &gt;&gt; <span class="variable">$(</span><span class="constant">GDBINIT_FILE</span>)  
ifeq (<span class="variable">$(</span><span class="constant">DEBUG_BACKEND</span>),simulavr)  
    <span class="variable">@echo</span> load  &gt;&gt; <span class="variable">$(</span><span class="constant">GDBINIT_FILE</span>)  
endif  
    <span class="variable">@echo</span> <span class="keyword">break</span> main &gt;&gt; <span class="variable">$(</span><span class="constant">GDBINIT_FILE</span>)  
  
<span class="symbol">debug:</span> gdb-config <span class="variable">$(</span><span class="constant">TARGET</span>).elf  
ifeq (<span class="variable">$(</span><span class="constant">DEBUG_BACKEND</span>), avarice)  
    <span class="variable">@echo</span> <span class="constant">Starting</span> <span class="constant">AVaRICE</span> - <span class="constant">Press</span> enter <span class="keyword">when</span> <span class="string">"waiting to connect"</span> message displays.  
    <span class="comment">#@$(WINSHELL) /c start avarice --jtag $(JTAG_DEV) --erase --program --file \  </span>
    <span class="comment">#$(TARGET).hex $(DEBUG_HOST):$(DEBUG_PORT)  </span>
    <span class="comment">#@$(WINSHELL) /c pause  </span>
    @<span class="variable">$(</span><span class="constant">WINSHELL</span>)  avarice --xmega -g --jtag <span class="variable">$(</span><span class="constant">JTAG_DEV</span>) --erase --program --file   \  
    <span class="variable">$(</span><span class="constant">TARGET</span>).<span class="symbol">elf:</span><span class="variable">$(</span><span class="constant">DEBUG_PORT</span>)  
    <span class="comment">#@$(WINSHELL)  pause  </span>
  
<span class="keyword">else</span>  
    @<span class="variable">$(</span><span class="constant">WINSHELL</span>) /c start simulavr --gdbserver --device <span class="variable">$(</span><span class="constant">MCU</span>) --clock-freq \  
    <span class="variable">$(</span><span class="constant">DEBUG_MFREQ</span>) --port <span class="variable">$(</span><span class="constant">DEBUG_PORT</span>)  
endif  
    <span class="comment">#@$(WINSHELL) /c start avr-$(DEBUG_UI) --command=$(GDBINIT_FILE)  </span>
    @<span class="variable">$(</span><span class="constant">WINSHELL</span>)  <span class="variable">$(</span><span class="constant">DEBUG_UI</span>)  
  
  
  
  
<span class="comment"># Convert ELF to COFF for use in debugging / simulating in AVR Studio or VMLAB.  </span>
<span class="constant">COFFCONVERT</span> = <span class="variable">$(</span><span class="constant">OBJCOPY</span>) --debugging  
<span class="constant">COFFCONVERT</span> += --change-section-address .data-<span class="number">0x800000</span>  
<span class="constant">COFFCONVERT</span> += --change-section-address .bss-<span class="number">0x800000</span>  
<span class="constant">COFFCONVERT</span> += --change-section-address .noinit-<span class="number">0x800000</span>  
<span class="constant">COFFCONVERT</span> += --change-section-address .eeprom-<span class="number">0x810000</span>  
  
  
  
<span class="symbol">coff:</span> <span class="variable">$(</span><span class="constant">TARGET</span>).elf  
    <span class="variable">@echo</span>  
    <span class="variable">@echo</span> <span class="variable">$(</span><span class="constant">MSG_COFF</span>) <span class="variable">$(</span><span class="constant">TARGET</span>).cof  
    <span class="variable">$(</span><span class="constant">COFFCONVERT</span>) -<span class="constant">O</span> coff-avr <span class="variable">$&lt;</span> <span class="variable">$(</span><span class="constant">TARGET</span>).cof  
  
  
<span class="symbol">extcoff:</span> <span class="variable">$(</span><span class="constant">TARGET</span>).elf  
    <span class="variable">@echo</span>  
    <span class="variable">@echo</span> <span class="variable">$(</span><span class="constant">MSG_EXTENDED_COFF</span>) <span class="variable">$(</span><span class="constant">TARGET</span>).cof  
    <span class="variable">$(</span><span class="constant">COFFCONVERT</span>) -<span class="constant">O</span> coff-ext-avr <span class="variable">$&lt;</span> <span class="variable">$(</span><span class="constant">TARGET</span>).cof  
  
  
  
<span class="comment"># Create final output files (.hex, .eep) from ELF output file.  </span>
%.<span class="symbol">hex:</span> %.elf  
    <span class="variable">@echo</span>  
    <span class="variable">@echo</span> <span class="variable">$(</span><span class="constant">MSG_FLASH</span>) <span class="variable">$@</span>  
    <span class="variable">$(</span><span class="constant">OBJCOPY</span>) -<span class="constant">O</span> <span class="variable">$(</span><span class="constant">FORMAT</span>) -<span class="constant">R</span> .eeprom -<span class="constant">R</span> .fuse -<span class="constant">R</span> .lock <span class="variable">$&lt;</span> <span class="variable">$@</span>  
  
%.<span class="symbol">eep:</span> %.elf  
    <span class="variable">@echo</span>  
    <span class="variable">@echo</span> <span class="variable">$(</span><span class="constant">MSG_EEPROM</span>) <span class="variable">$@</span>  
    -<span class="variable">$(</span><span class="constant">OBJCOPY</span>) -j .eeprom --set-section-flags=.eeprom=<span class="string">"alloc,load"</span> \  
    --change-section-lma .eeprom=<span class="number">0</span> --no-change-warnings -<span class="constant">O</span> <span class="variable">$(</span><span class="constant">FORMAT</span>) <span class="variable">$&lt;</span> <span class="variable">$@</span> || exit <span class="number">0</span>  
  
<span class="comment"># Create extended listing file from ELF output file.  </span>
%.<span class="symbol">lss:</span> %.elf  
    <span class="variable">@echo</span>  
    <span class="variable">@echo</span> <span class="variable">$(</span><span class="constant">MSG_EXTENDED_LISTING</span>) <span class="variable">$@</span>  
    <span class="variable">$(</span><span class="constant">OBJDUMP</span>) -h -<span class="constant">S</span> -z <span class="variable">$&lt;</span> &gt; <span class="variable">$@</span>  
  
<span class="comment"># Create a symbol table from ELF output file.  </span>
%.<span class="symbol">sym:</span> %.elf  
    <span class="variable">@echo</span>  
    <span class="variable">@echo</span> <span class="variable">$(</span><span class="constant">MSG_SYMBOL_TABLE</span>) <span class="variable">$@</span>  
    <span class="variable">$(</span><span class="constant">NM</span>) -n <span class="variable">$&lt;</span> &gt; <span class="variable">$@</span>  
  
  
  
<span class="comment"># Create library from object files.  </span>
.<span class="constant">SECONDARY</span> <span class="symbol">:</span> <span class="variable">$(</span><span class="constant">TARGET</span>).a  
.<span class="constant">PRECIOUS</span> <span class="symbol">:</span> <span class="variable">$(</span><span class="constant">OBJ</span>)  
%.<span class="symbol">a:</span> <span class="variable">$(</span><span class="constant">OBJ</span>)  
    <span class="variable">@echo</span>  
    <span class="variable">@echo</span> <span class="variable">$(</span><span class="constant">MSG_CREATING_LIBRARY</span>) <span class="variable">$@</span>  
    <span class="variable">$(</span><span class="constant">AR</span>) <span class="variable">$@</span> <span class="variable">$(</span><span class="constant">OBJ</span>)  
  
  
<span class="comment"># Link: create ELF output file from object files.  </span>
.<span class="constant">SECONDARY</span> <span class="symbol">:</span> <span class="variable">$(</span><span class="constant">TARGET</span>).elf  
.<span class="constant">PRECIOUS</span> <span class="symbol">:</span> <span class="variable">$(</span><span class="constant">OBJ</span>)  
%.<span class="symbol">elf:</span> <span class="variable">$(</span><span class="constant">OBJ</span>)  
    <span class="variable">@echo</span>  
    <span class="variable">@echo</span> <span class="variable">$(</span><span class="constant">MSG_LINKING</span>) <span class="variable">$@</span>  
    <span class="variable">$(</span><span class="constant">CC</span>) <span class="variable">$(</span><span class="constant">ALL_CFLAGS</span>) <span class="variable">$^</span> --output <span class="variable">$@</span> <span class="variable">$(</span><span class="constant">LDFLAGS</span>)  
  
  
<span class="comment"># Compile: create object files from C source files.  </span>
<span class="variable">$(</span><span class="constant">OBJDIR</span>)/%.o <span class="symbol">:</span> %.c  
    <span class="variable">@echo</span>  
    <span class="variable">@echo</span> <span class="variable">$(</span><span class="constant">MSG_COMPILING</span>) <span class="variable">$&lt;</span>  
    <span class="variable">$(</span><span class="constant">CC</span>) -c <span class="variable">$(</span><span class="constant">ALL_CFLAGS</span>) <span class="variable">$&lt;</span> -o <span class="variable">$@</span>   
  
  
<span class="comment"># Compile: create object files from C++ source files.  </span>
<span class="variable">$(</span><span class="constant">OBJDIR</span>)/%.o <span class="symbol">:</span> %.cpp  
    <span class="variable">@echo</span>  
    <span class="variable">@echo</span> <span class="variable">$(</span><span class="constant">MSG_COMPILING_CPP</span>) <span class="variable">$&lt;</span>  
    <span class="variable">$(</span><span class="constant">CC</span>) -c <span class="variable">$(</span><span class="constant">ALL_CPPFLAGS</span>) <span class="variable">$&lt;</span> -o <span class="variable">$@</span>   
  
  
  
<span class="comment"># Compile: create assembler files from C source files.  </span>
%.s <span class="symbol">:</span> %.c  
    <span class="variable">$(</span><span class="constant">CC</span>) -<span class="constant">S</span> <span class="variable">$(</span><span class="constant">ALL_CFLAGS</span>) <span class="variable">$&lt;</span> -o <span class="variable">$@</span>  
  
  
<span class="comment"># Compile: create assembler files from C++ source files.  </span>
%.s <span class="symbol">:</span> %.cpp  
    <span class="variable">$(</span><span class="constant">CC</span>) -<span class="constant">S</span> <span class="variable">$(</span><span class="constant">ALL_CPPFLAGS</span>) <span class="variable">$&lt;</span> -o <span class="variable">$@</span>  
  
  
<span class="comment"># Assemble: create object files from assembler source files.  </span>
<span class="variable">$(</span><span class="constant">OBJDIR</span>)/%.o <span class="symbol">:</span> %.<span class="constant">S</span>  
    <span class="variable">@echo</span>  
    <span class="variable">@echo</span> <span class="variable">$(</span><span class="constant">MSG_ASSEMBLING</span>) <span class="variable">$&lt;</span>  
    <span class="variable">$(</span><span class="constant">CC</span>) -c <span class="variable">$(</span><span class="constant">ALL_ASFLAGS</span>) <span class="variable">$&lt;</span> -o <span class="variable">$@</span>  
  
  
<span class="comment"># Create preprocessed source for use in sending a bug report.  </span>
%.i <span class="symbol">:</span> %.c  
    <span class="variable">$(</span><span class="constant">CC</span>) -<span class="constant">E</span> -mmcu=<span class="variable">$(</span><span class="constant">MCU</span>) -<span class="constant">I</span>. <span class="variable">$(</span><span class="constant">CFLAGS</span>) <span class="variable">$&lt;</span> -o <span class="variable">$@</span>   
  
  
<span class="comment"># Target: clean project.  </span>
<span class="symbol">clean:</span> <span class="keyword">begin</span> clean_list <span class="keyword">end</span>  
  
clean_list <span class="symbol">:</span>  
    <span class="variable">@echo</span>  
    <span class="variable">@echo</span> <span class="variable">$(</span><span class="constant">MSG_CLEANING</span>)  
    <span class="variable">$(</span><span class="constant">REMOVE</span>) <span class="variable">$(</span><span class="constant">TARGET</span>).hex  
    <span class="variable">$(</span><span class="constant">REMOVE</span>) <span class="variable">$(</span><span class="constant">TARGET</span>).eep  
    <span class="variable">$(</span><span class="constant">REMOVE</span>) <span class="variable">$(</span><span class="constant">TARGET</span>).cof  
    <span class="variable">$(</span><span class="constant">REMOVE</span>) <span class="variable">$(</span><span class="constant">TARGET</span>).elf  
    <span class="variable">$(</span><span class="constant">REMOVE</span>) <span class="variable">$(</span><span class="constant">TARGET</span>).map  
    <span class="variable">$(</span><span class="constant">REMOVE</span>) <span class="variable">$(</span><span class="constant">TARGET</span>).sym  
    <span class="variable">$(</span><span class="constant">REMOVE</span>) <span class="variable">$(</span><span class="constant">TARGET</span>).lss  
    <span class="variable">$(</span><span class="constant">REMOVE</span>) <span class="variable">$(</span><span class="constant">SRC</span><span class="symbol">:%</span>.c=<span class="variable">$(</span><span class="constant">OBJDIR</span>)/%.o)  
    <span class="variable">$(</span><span class="constant">REMOVE</span>) <span class="variable">$(</span><span class="constant">SRC</span><span class="symbol">:%</span>.c=<span class="variable">$(</span><span class="constant">OBJDIR</span>)/%.lst)  
    <span class="variable">$(</span><span class="constant">REMOVE</span>) <span class="variable">$(</span><span class="constant">SRC</span><span class="symbol">:</span>.c=.s)  
    <span class="variable">$(</span><span class="constant">REMOVE</span>) <span class="variable">$(</span><span class="constant">SRC</span><span class="symbol">:</span>.c=.d)  
    <span class="variable">$(</span><span class="constant">REMOVE</span>) <span class="variable">$(</span><span class="constant">SRC</span><span class="symbol">:</span>.c=.i)  
    <span class="variable">$(</span><span class="constant">REMOVEDIR</span>) .dep  
  
  
<span class="comment"># Create object files directory  </span>
<span class="variable">$(</span>shell mkdir <span class="variable">$(</span><span class="constant">OBJDIR</span>) <span class="number">2</span>&gt;<span class="regexp">/dev/null</span>)  
  
  
<span class="comment"># Include the dependency files.  </span>
-<span class="keyword">include</span> <span class="variable">$(</span>shell mkdir .dep <span class="number">2</span>&gt;<span class="regexp">/dev/null</span>) <span class="variable">$(</span>wildcard .dep/*)  
  
  
<span class="comment"># Listing of phony targets.  </span>
.<span class="constant">PHONY</span> <span class="symbol">:</span> all <span class="keyword">begin</span> finish <span class="keyword">end</span> sizebefore sizeafter gccversion \  
build elf hex eep lss sym coff extcoff \  
clean clean_list program debug gdb-config
</pre></td></tr></table></figure>

]]></content>
    <summary type="html"><![CDATA[<h3 id="-ubuntu-atmeg16-avr-gcc-usbasp-">此篇以Ubuntu下的atmeg16，avr-gcc + usbasp的开发环境搭建来进行说明。</h3>
<p><strong>由于文章迁移手头没有avr一部分图片用的以前的，看颜色也能看出来，会在后期改掉的，但效果是ok的</strong></p>
<p>系列说明：avr作为很成功的一系列芯片，在开源上受到了极大的关注，因为使其在linux环境下的开发充满乐趣和色彩。</p>
<p>环境如下：</p>
<ul>
<li>OS系统：ubuntu 12.04（原为10.04最近升级了）</li>
<li>编译器 ：avr-gcc</li>
<li>烧录软件 :avrdude</li>
<li>调试软件:avarice ，GDB和ddd （可视界面）</li>
<li>开发板：</li>
</ul>
<ol>
<li><p>xplain(xmega128a1)无法调试，只能烧录，因为官方没有公开其调试的协议。</p>
</li>
<li><p>Mega16开发板。</p>
</li>
</ol>
<p>仿真器or烧录器：dragon和usbasp（使用较多）</p>
<h2 id="-more-">]]></summary>
    
      <category term="avr系列" scheme="galaxy2416.github.io/categories/avr%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[51之linux : (一) 在linux环境下搭建51开发环境]]></title>
    <link href="galaxy2416.github.io/2014/02/05/linux-51-1/"/>
    <id>galaxy2416.github.io/2014/02/05/linux-51-1/</id>
    <published>2014-02-05T13:56:31.000Z</published>
    <updated>2014-02-06T14:34:50.000Z</updated>
    <content type="html"><![CDATA[<h3 id="-ubuntu-at89s52-s51-sdcc-usbasp-">此篇以Ubuntu下的AT89S52，S51+SDCC+USBASP的开发环境搭建来进行说明。</h3>
<p>系列说明：LINUX下程序开发具有一定的成熟性，但是对于跨平台的包括部分的MCU，FPGA还并未被广泛使用,本系列将针对51系列的MCU.跟大家分享下。</p>
<p>环境如下：</p>
<ul>
<li>OS系统 : ubuntu 12.04</li>
<li>编译器 : sdcc</li>
<li>烧录软件 : avrdude</li>
<li>烧录器件 : usbasp
<a id="more"></a>
开发板：</li>
</ul>
<p>开发板的确是有个小的，不过这意搭接了一个个人的小面包板版本。</p>
<p>如下图:<img src="/img/ubuntu-51-fir/hardware1.jpg" alt="HARDWARE">
最好弄运行的时候只需要电池1.2V*4，用了3个3.6V就可行（我的电池座忘带了，直接连起来）～建议最好有个USB接出来的5V电源或者自己有个变压器做的稳压电源，面包板上有一个电源小板子就是如此功能，不过这里没有使用。</p>
<p> <em>注:旁边的小板子是USBASP,也有供电功能～此处就放在那里做个合影</em>。</p>
<hr>
<p><code>软件准备工作:</code></p>
<p>软件安装，软件安装建议使用ubuntu的软件中心，比较方便。需要sdcc，avrdude即可了。文本编辑什么都行。也可以集成在codeblocks和eclipse里面，ubuntu下有个51MCU的IDE，可以下来用‘mcu8051ide’。</p>
<p>对于命令行可以如下安装。对于一些附带库和文档自行选择即可～</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="built_in">sudo</span> apt-get install avrdude
<span class="built_in">sudo</span> apt-get install sdcc
</pre></td></tr></table></figure>

<p><code>测试开始</code>
开始之前需要先写一个main.c的程序</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="code"><pre><span class="preprocessor">#include &lt;8052.h&gt;</span>
<span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> size_t;
 
<span class="preprocessor">#define LED P0_0</span>
 
<span class="keyword">void</span> delay(size_t t)
{
        <span class="keyword">while</span>(t--);
}
 
<span class="keyword">void</span> main()
{
        <span class="keyword">while</span>(<span class="number">1</span>)
        {
                LED = <span class="number">0</span>;
                delay(<span class="number">20000</span>);
                LED = <span class="number">1</span>;
                delay(<span class="number">20000</span>);
        }
}
</pre></td></tr></table></figure>

<p>这是一个很简单让一个小灯blink的程序。</p>
<p><code>编译：</code></p>
<p>之后就要编译程序把程序变成单片机能使用的<em>.elf </em>.bin *.hex之类</p>
<p>这里使用的是SDCC默认编译出现的*.ihx (intel hex)</p>
<p>在当前目录下执行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>sdcc -mmcs51 main<span class="preprocessor">.c</span>
</pre></td></tr></table></figure>

<p><del>-mmcs51</del> <em>也可以-默认</em></p>
<p><code>配置avrdude:</code></p>
<p>使用avrdude烧写 </p>
<p>我们不能直接使用avrdude烧写，这是因为它默认只支持AVR芯片，但是通过一些配置，我们可以使用它来烧写。</p>
<p>对于8051芯片，有三种配置文件，分别适用于不同的型号。看看你要哪一种，然后复制到/etc/avrdude.conf并保存。</p>
<p><code>sudo gedit /etc/avrdude.conf</code></p>
<p><em>For AT89S51</em></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
</pre></td><td class="code"><pre><span class="comment">#------------------------------------------------------------</span>
<span class="comment"># AT89S51</span>
<span class="comment">#------------------------------------------------------------</span>
part
    <span class="property">id</span>               = <span class="string">"8052"</span>;
    desc             = <span class="string">"AT89S51"</span>;
    signature        = <span class="number">0x1E</span> <span class="number">0x51</span> <span class="number">0x06</span>;
    chip_erase_delay = <span class="number">500000</span>;
    pgm_enable       = <span class="string">"1 0 1 0  1 1 0 0    0 1 0 1  0 0 1 1"</span>,
                       <span class="string">"x x x x  x x x x    x x x x  x x x x"</span>; 

    chip_erase       = <span class="string">"1 0 1 0  1 1 0 0    1 0 0 x  x x x x"</span>,
                       <span class="string">"x x x x  x x x x    x x x x  x x x x"</span>; 

    <span class="keyword">timeout</span>      = <span class="number">200</span>;
    stabdelay      = <span class="number">100</span>;
    cmdexedelay      = <span class="number">25</span>;
    synchloops      = <span class="number">32</span>;
    bytedelay      = <span class="number">0</span>;
    pollindex      = <span class="number">3</span>;
    pollvalue      = <span class="number">0x53</span>;
    predelay      = <span class="number">1</span>;
    postdelay      = <span class="number">1</span>;
    pollmethod      = <span class="number">0</span>; 

    memory <span class="string">"flash"</span>
        size            = <span class="number">4096</span>;
        paged           = no;
        min_write_delay = <span class="number">4000</span>;
        max_write_delay = <span class="number">9000</span>;
        readback_p1     = <span class="number">0xff</span>;
        readback_p2     = <span class="number">0xff</span>;
        <span class="command">read</span>            = <span class="string">"  0   0   1   0    0   0   0   0"</span>,
                          <span class="string">"  x   x   x a12  a11 a10  a9  a8"</span>,
                          <span class="string">" a7  a6  a5  a4   a3  a2  a1  a0"</span>,
                          <span class="string">"  o   o   o   o    o   o   o   o"</span>; 

        <span class="command">write</span>           = <span class="string">"  0   1   0   0    0   0   0   0"</span>,
                          <span class="string">"  x   x   x a12  a11 a10  a9  a8"</span>,
                          <span class="string">" a7  a6  a5  a4   a3  a2  a1  a0"</span>,
                          <span class="string">"  i   i   i   i    i   i   i   i"</span>;
   mode      = <span class="number">0x21</span>;
   <span class="command">delay</span>      = <span class="number">12</span>;
      ; 

    memory <span class="string">"signature"</span>
        size            = <span class="number">3</span>;
        <span class="command">read</span>            = <span class="string">"0  0  1  0   1  0  0  0   x  x  x  0   0  0 a1 a0"</span>,
                          <span class="string">"0  0  0  0   0  0  0  0   o  o  o  o   o  o  o  o"</span>;
      ;
  ;
</pre></td></tr></table></figure>

<p><em>For AT89S52</em></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
</pre></td><td class="code"><pre><span class="comment">#------------------------------------------------------------</span>
<span class="comment"># AT89S52</span>
<span class="comment">#------------------------------------------------------------</span>
part
    <span class="property">id</span>               = <span class="string">"8052"</span>;
    desc             = <span class="string">"AT89S52"</span>;
    signature        = <span class="number">0x1E</span> <span class="number">0x52</span> <span class="number">0x06</span>;
    chip_erase_delay = <span class="number">500000</span>;
    pgm_enable       = <span class="string">"1 0 1 0  1 1 0 0    0 1 0 1  0 0 1 1"</span>,
                       <span class="string">"x x x x  x x x x    x x x x  x x x x"</span>; 

    chip_erase       = <span class="string">"1 0 1 0  1 1 0 0    1 0 0 x  x x x x"</span>,
                       <span class="string">"x x x x  x x x x    x x x x  x x x x"</span>; 

    <span class="keyword">timeout</span>      = <span class="number">200</span>;
    stabdelay      = <span class="number">100</span>;
    cmdexedelay      = <span class="number">25</span>;
    synchloops      = <span class="number">32</span>;
    bytedelay      = <span class="number">0</span>;
    pollindex      = <span class="number">3</span>;
    pollvalue      = <span class="number">0x53</span>;
    predelay      = <span class="number">1</span>;
    postdelay      = <span class="number">1</span>;
    pollmethod      = <span class="number">0</span>; 

    memory <span class="string">"flash"</span>
        size            = <span class="number">8192</span>;
        paged           = no;
        min_write_delay = <span class="number">4000</span>;
        max_write_delay = <span class="number">9000</span>;
        readback_p1     = <span class="number">0xff</span>;
        readback_p2     = <span class="number">0xff</span>;
        <span class="command">read</span>            = <span class="string">"  0   0   1   0    0   0   0   0"</span>,
                          <span class="string">"  x   x   x a12  a11 a10  a9  a8"</span>,
                          <span class="string">" a7  a6  a5  a4   a3  a2  a1  a0"</span>,
                          <span class="string">"  o   o   o   o    o   o   o   o"</span>;

        <span class="command">write</span>           = <span class="string">"  0   1   0   0    0   0   0   0"</span>,
                          <span class="string">"  x   x   x a12  a11 a10  a9  a8"</span>,
                          <span class="string">" a7  a6  a5  a4   a3  a2  a1  a0"</span>,
                          <span class="string">"  i   i   i   i    i   i   i   i"</span>;
   mode      = <span class="number">0x21</span>;
   <span class="command">delay</span>      = <span class="number">12</span>;
      ; 

    memory <span class="string">"signature"</span>
        size            = <span class="number">3</span>;
        <span class="command">read</span>            = <span class="string">"0  0  1  0   1  0  0  0   x  x  x  0   0  0 a1 a0"</span>,
                          <span class="string">"0  0  0  0   0  0  0  0   o  o  o  o   o  o  o  o"</span>;
      ;
  ;
</pre></td></tr></table></figure>

<p><em>For AT89S8253</em></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
</pre></td><td class="code"><pre><span class="comment">#------------------------------------------------------------</span>
<span class="comment"># AT89S8253</span>
<span class="comment">#------------------------------------------------------------</span>
part
    <span class="property">id</span>               = <span class="string">"8253"</span>;
    desc             = <span class="string">"AT89S8253"</span>;
    chip_erase_delay = <span class="number">20000</span>;
    pgm_enable       = <span class="string">"1 0 1 0  1 1 0 0    0 1 0 1  0 0 1 1"</span>,
                       <span class="string">"x x x x  x x x x    x x x x  x x x x"</span>; 

    chip_erase       = <span class="string">"1 0 1 0  1 1 0 0    1 0 0 x  x x x x"</span>,
                       <span class="string">"x x x x  x x x x    x x x x  x x x x"</span>; 

    <span class="keyword">timeout</span>      = <span class="number">200</span>;
    stabdelay      = <span class="number">100</span>;
    cmdexedelay      = <span class="number">25</span>;
    synchloops      = <span class="number">32</span>;
    bytedelay      = <span class="number">0</span>;
    pollindex      = <span class="number">3</span>;
    pollvalue      = <span class="number">0x53</span>;
    predelay      = <span class="number">1</span>;
    postdelay      = <span class="number">1</span>;
    pollmethod      = <span class="number">0</span>; 

    memory <span class="string">"flash"</span>
        size            = <span class="number">12288</span>;
        paged           = no;
        min_write_delay = <span class="number">4000</span>;
        max_write_delay = <span class="number">9000</span>;
        readback_p1     = <span class="number">0xff</span>;
        readback_p2     = <span class="number">0xff</span>;
        <span class="command">read</span>            = <span class="string">"  0   0   1   0    0   0   0   0"</span>,
                          <span class="string">"  x   x a13 a12  a11 a10  a9  a8"</span>,
                          <span class="string">" a7  a6  a5  a4   a3  a2  a1  a0"</span>,
                          <span class="string">"  o   o   o   o    o   o   o   o"</span>;

        <span class="command">write</span>           = <span class="string">"  0   1   0   0    0   0   0   0"</span>,
                          <span class="string">"  x   x a13 a12  a11 a10  a9  a8"</span>,
                          <span class="string">" a7  a6  a5  a4   a3  a2  a1  a0"</span>,
                          <span class="string">"  i   i   i   i    i   i   i   i"</span>;
   mode      = <span class="number">0x21</span>;
   <span class="command">delay</span>      = <span class="number">12</span>;
      ; 

    memory <span class="string">"signature"</span>
        size            = <span class="number">2</span>;
        readback_p1     = <span class="number">0x1E</span>;
        readback_p2     = <span class="number">0x73</span>;
        <span class="command">read</span>            = <span class="string">"0  0  1  0   1  0  0  0   x  x  x  x   x  x  x  x"</span>,
                          <span class="string">"x  x  1  1   0  0  0 a0   o  o  o  o   o  o  o  o"</span>;
      ;
  ;
</pre></td></tr></table></figure>

<p><strong>特意要说明一下的是，网上有些配置在S51和S52的delay的参数上给的20000，这个delay太短了，在验证代码的时候会出错。因此还是建议用如上的配置。</strong></p>
<p><code>使用avrdude烧写:</code></p>
<p>配置完成后要用main.ihx进行烧写,在终端执行 
<code>make program</code>
(makefile见后文)</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
</pre></td><td class="code"><pre>monkey<span class="property">@monkey</span>-ThinkPad-<span class="attribute">E425</span>:~/McuWork/<span class="number">51</span>_SDCC/workpace/Blink$ make program 
sudo avrdude -p <span class="number">8052</span> -c usbasp -e -U <span class="attribute">flash</span>:<span class="attribute">w</span>:<span class="string">'./main.ihx'</span>

<span class="attribute">avrdude</span>: <span class="attribute">warning</span>: cannot set sck period. please check <span class="keyword">for</span> usbasp firmware update.
<span class="attribute">avrdude</span>: AVR device initialized <span class="keyword">and</span> ready to accept instructions

Reading | <span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">## | 100% 0.01s</span>

<span class="attribute">avrdude</span>: Device signature = <span class="number">0x1e5206</span>
<span class="attribute">avrdude</span>: erasing chip
<span class="attribute">avrdude</span>: <span class="attribute">warning</span>: cannot set sck period. please check <span class="keyword">for</span> usbasp firmware update.
<span class="attribute">avrdude</span>: reading input file <span class="string">"./main.ihx"</span>
<span class="attribute">avrdude</span>: input file ./main.ihx auto detected as Intel Hex
<span class="attribute">avrdude</span>: writing flash (<span class="number">140</span> bytes):

Writing | <span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">## | 100% 1.69s</span>

<span class="attribute">avrdude</span>: <span class="number">140</span> bytes <span class="keyword">of</span> flash written
<span class="attribute">avrdude</span>: verifying flash memory against ./main.<span class="attribute">ihx</span>:
<span class="attribute">avrdude</span>: load data flash data from input file ./main.<span class="attribute">ihx</span>:
<span class="attribute">avrdude</span>: input file ./main.ihx auto detected as Intel Hex
<span class="attribute">avrdude</span>: input file ./main.ihx contains <span class="number">140</span> bytes
<span class="attribute">avrdude</span>: reading <span class="literal">on</span>-chip flash <span class="attribute">data</span>:

Reading | <span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">## | 100% 0.57s</span>

<span class="attribute">avrdude</span>: verifying ...
<span class="attribute">avrdude</span>: <span class="number">140</span> bytes <span class="keyword">of</span> flash verified

<span class="attribute">avrdude</span>: <span class="attribute">safemode</span>: Fuses OK

avrdude done.  Thank you.

monkey<span class="property">@monkey</span>-ThinkPad-<span class="attribute">E425</span>:~/McuWork/<span class="number">51</span>_SDCC/workpace/Blink$
</pre></td></tr></table></figure>

<p><code>选项说明(Options)：</code></p>
<p><a href="/attachment/avrdude.pdf">avrdude文档</a></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre>-p specifies <span class="operator">the</span> type <span class="operator">of</span> <span class="operator">the</span> MCU connected <span class="built_in">to</span> <span class="operator">the</span> programmer.  
-c specifies <span class="operator">the</span> default programmer  
-e causes <span class="operator">a</span> chip erase <span class="built_in">to</span> be executed.  
-U memtype:op:filename  
The op field specifies what operation <span class="built_in">to</span> perform:  
 r <span class="built_in">read</span> device memory <span class="operator">and</span> <span class="built_in">write</span> <span class="built_in">to</span> <span class="operator">the</span> specified <span class="built_in">file</span>  
 w <span class="built_in">read</span> data <span class="built_in">from</span> <span class="operator">the</span> specified <span class="built_in">file</span> <span class="operator">and</span> <span class="built_in">write</span> <span class="built_in">to</span> <span class="operator">the</span> device memory  
 v <span class="built_in">read</span> data <span class="built_in">from</span> both <span class="operator">the</span> device <span class="operator">and</span> <span class="operator">the</span> specified <span class="built_in">file</span> <span class="operator">and</span> perform <span class="operator">a</span> verify
</pre></td></tr></table></figure>

<p>总图:<img src="/img/ubuntu-51-fir/hardware2.jpg" alt="WHOLE"></p>
<p>使用USBASP前请用<code>lsusb</code>查看一下是否能检测到。并且注意STC的串口软件没有在linux下版本，USBASP使用的是ISP接口，对于AT89C51,AT89C52是无法使用的切记。</p>
<p>USBASP是开源的一款硬件,
<a href="http://www.fischl.de/usbasp/" target="_blank">USBASP制作</a></p>
<p><a href="/attachment/usb51.zip">USBASP固件</a> (以防有的固件比较老不支持)</p>
<hr>
<p><strong>附录：</strong></p>
<p>单源文件简易Makefile</p>
<p>make : 编译</p>
<p>make hex : 生成*.hex</p>
<p>make program : 烧录</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
</pre></td><td class="code"><pre><span class="comment">#=============================================================================</span>
<span class="comment">#     FileName: Makefile</span>
<span class="comment">#         Desc: sdcc signal file</span>
<span class="comment">#       Author: Galaxy2416(Gin)</span>
<span class="comment">#        Email: sunxiao.gin@gmail.com</span>
<span class="comment">#     Compiler: sdcc</span>
<span class="comment">#      Version: 0.0.1</span>
<span class="comment">#   LastChange: 2012-05-19 16:30:35</span>
<span class="comment">#      History:</span>
<span class="comment">#=============================================================================</span>


<span class="constant">CC</span>=sdcc

<span class="constant">SOURCE</span> = <span class="variable">$(wildcard *.c)</span>


all :
	<span class="variable">$(CC)</span> -mmcs51 <span class="variable">$(SOURCE)</span> 
<span class="title">hex:</span>
	packihx '<span class="variable">$(wildcard *.ihx)</span>' &gt; '<span class="variable">$(patsubst %.ihx,%.hex,$(wildcard *.ihx)</span>)'

program : 
	sudo avrdude -p 8052 -c usbasp -e -U flash:w:'./<span class="variable">$(wildcard *.ihx)</span>'

<span class="phony"><span class="keyword">.PHONY</span>:	clean</span>
<span class="title">clean:</span>
	rm -f *.bak
	rm -f *.rel
	rm -f *.asm
	rm -f *.lst
	rm -f *.sym
	rm -f *.map
	rm -f *.lnk
	rm -f *.mem
	rm -f *.i
	rm -f *.d
	rm -f *.rst
</pre></td></tr></table></figure>

]]></content>
    <summary type="html"><![CDATA[<h3 id="-ubuntu-at89s52-s51-sdcc-usbasp-">此篇以Ubuntu下的AT89S52，S51+SDCC+USBASP的开发环境搭建来进行说明。</h3>
<p>系列说明：LINUX下程序开发具有一定的成熟性，但是对于跨平台的包括部分的MCU，FPGA还并未被广泛使用,本系列将针对51系列的MCU.跟大家分享下。</p>
<p>环境如下：</p>
<ul>
<li>OS系统 : ubuntu 12.04</li>
<li>编译器 : sdcc</li>
<li>烧录软件 : avrdude</li>
<li>烧录器件 : usbasp
]]></summary>
    
      <category term="51单片机" scheme="galaxy2416.github.io/categories/51%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Say Hi]]></title>
    <link href="galaxy2416.github.io/2014/01/30/say-hi/"/>
    <id>galaxy2416.github.io/2014/01/30/say-hi/</id>
    <published>2014-01-29T16:56:34.000Z</published>
    <updated>2014-02-07T15:13:40.000Z</updated>
    <content type="html"><![CDATA[<h2 id="maxwell-s-equations-in-differential-form">Maxwell&#39;s Equations in differential form</h2>
<p> <a id="more"></a>
$$ \nabla\cdot{\bf D} = \rho $$
$$ \nabla\cdot{\bf B} = 0 $$
$$ \nabla\times{\bf E} = -\frac{\partial{\bf B}}{\partial{\bf t}}$$
$$ \nabla\times{\bf H} = {\bf J} + \frac{\partial{\bf D}}{\partial{\bf t}} $$
<code>code:-&gt;</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre>$$ \nabla\cdot{\bf D} = \rho $$
$$ \nabla\cdot{\bf B} = <span class="number">0</span> $$
$$ \nabla\times{\bf E} = -\frac{\partial{\bf B}}{\partial{\bf t}}$$
$$ \nabla\times{\bf H} = {\bf J} + \frac{\partial{\bf D}}{\partial{\bf t}} $$
</pre></td></tr></table></figure>

<p><img src="/img/pikadrink.jpg" alt="pika~"></p>
]]></content>
    <summary type="html"><![CDATA[<h2 id="maxwell-s-equations-in-differential-form">Maxwell&#39;s Equations in differential form</h2>
<p> ]]></summary>
    
      <category term="第一篇文章" scheme="galaxy2416.github.io/tags/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
    
      <category term="math" scheme="galaxy2416.github.io/categories/math/"/>
    
  </entry>
  
</feed>
